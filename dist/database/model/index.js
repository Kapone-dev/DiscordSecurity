"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Registrador = exports.Messages = exports.Malicioso = exports.Langs = exports.Channel = exports.Vip = void 0;
const mongoose_1 = require("mongoose");
// Creando los esquemas
const vip = new mongoose_1.Schema({
    guildId: String,
    time: Date,
    buyer: String,
    licence: String
});
const channel = new mongoose_1.Schema({
    _id: String,
    channel: Array
});
const langs = new mongoose_1.Schema({
    _id: String,
    lang: String
});
const malicioso = new mongoose_1.Schema({
    usuarios: Array
});
const messages = new mongoose_1.Schema({
    _id: String,
    channel: String,
    messages: Array
});
const configuration = new mongoose_1.Schema({
    _id: String,
    channel: String,
    users: Array,
    extrem: Boolean,
    autoban: Boolean,
    roles: Boolean
});
// Exportando los esquemas
exports.Vip = mongoose_1.model('Vips', vip); // The users vip [BETA]
exports.Channel = mongoose_1.model('Channels', channel); // Channels to protect
exports.Langs = mongoose_1.model('Langs', langs); // The langs LOL
exports.Malicioso = mongoose_1.model('Malicioso', malicioso); // Bad users
exports.Messages = mongoose_1.model('messages', messages); // The channnels and the messages to save in the database
exports.Registrador = mongoose_1.model('Registrador', configuration); // Bot configuration
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvZGF0YWJhc2UvbW9kZWwvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsdUNBQW1EO0FBRW5ELHVCQUF1QjtBQUN2QixNQUFNLEdBQUcsR0FBRyxJQUFJLGlCQUFNLENBQUM7SUFDbkIsT0FBTyxFQUFFLE1BQU07SUFDZixJQUFJLEVBQUUsSUFBSTtJQUNWLEtBQUssRUFBRSxNQUFNO0lBQ2IsT0FBTyxFQUFFLE1BQU07Q0FDbEIsQ0FBQyxDQUFDO0FBRUgsTUFBTSxPQUFPLEdBQUcsSUFBSSxpQkFBTSxDQUFDO0lBQ3ZCLEdBQUcsRUFBRSxNQUFNO0lBQ1gsT0FBTyxFQUFFLEtBQUs7Q0FDakIsQ0FBQyxDQUFDO0FBRUgsTUFBTSxLQUFLLEdBQUcsSUFBSSxpQkFBTSxDQUFDO0lBQ3JCLEdBQUcsRUFBRSxNQUFNO0lBQ1gsSUFBSSxFQUFFLE1BQU07Q0FDZixDQUFDLENBQUM7QUFFSCxNQUFNLFNBQVMsR0FBRyxJQUFJLGlCQUFNLENBQUM7SUFDekIsUUFBUSxFQUFFLEtBQUs7Q0FDbEIsQ0FBQyxDQUFDO0FBR0gsTUFBTSxRQUFRLEdBQUcsSUFBSSxpQkFBTSxDQUFDO0lBQ3hCLEdBQUcsRUFBRSxNQUFNO0lBQ1gsT0FBTyxFQUFFLE1BQU07SUFDZixRQUFRLEVBQUUsS0FBSztDQUNsQixDQUFDLENBQUM7QUFHSCxNQUFNLGFBQWEsR0FBRyxJQUFJLGlCQUFNLENBQUM7SUFDN0IsR0FBRyxFQUFFLE1BQU07SUFDWCxPQUFPLEVBQUUsTUFBTTtJQUNmLEtBQUssRUFBRSxLQUFLO0lBQ1osTUFBTSxFQUFFLE9BQU87SUFDZixPQUFPLEVBQUUsT0FBTztJQUNoQixLQUFLLEVBQUUsT0FBTztDQUNqQixDQUFDLENBQUM7QUFHSCwwQkFBMEI7QUFDYixRQUFBLEdBQUcsR0FBRyxnQkFBSyxDQUFPLE1BQU0sRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLHVCQUF1QjtBQUN2RCxRQUFBLE9BQU8sR0FBRyxnQkFBSyxDQUFXLFVBQVUsRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDLHNCQUFzQjtBQUN0RSxRQUFBLEtBQUssR0FBRyxnQkFBSyxDQUFTLE9BQU8sRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDLGdCQUFnQjtBQUN2RCxRQUFBLFNBQVMsR0FBSSxnQkFBSyxDQUFhLFdBQVcsRUFBRSxTQUFTLENBQUMsQ0FBQyxDQUFDLFlBQVk7QUFDcEUsUUFBQSxRQUFRLEdBQUcsZ0JBQUssQ0FBWSxVQUFVLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQyx5REFBeUQ7QUFDNUcsUUFBQSxXQUFXLEdBQUcsZ0JBQUssQ0FBZSxhQUFhLEVBQUUsYUFBYSxDQUFDLENBQUMsQ0FBQyxvQkFBb0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBtb2RlbCwgU2NoZW1hLCBEb2N1bWVudCB9IGZyb20gJ21vbmdvb3NlJztcclxuXHJcbi8vIENyZWFuZG8gbG9zIGVzcXVlbWFzXHJcbmNvbnN0IHZpcCA9IG5ldyBTY2hlbWEoe1xyXG4gICAgZ3VpbGRJZDogU3RyaW5nLFxyXG4gICAgdGltZTogRGF0ZSxcclxuICAgIGJ1eWVyOiBTdHJpbmcsXHJcbiAgICBsaWNlbmNlOiBTdHJpbmdcclxufSk7XHJcblxyXG5jb25zdCBjaGFubmVsID0gbmV3IFNjaGVtYSh7XHJcbiAgICBfaWQ6IFN0cmluZyxcclxuICAgIGNoYW5uZWw6IEFycmF5XHJcbn0pO1xyXG5cclxuY29uc3QgbGFuZ3MgPSBuZXcgU2NoZW1hKHtcclxuICAgIF9pZDogU3RyaW5nLFxyXG4gICAgbGFuZzogU3RyaW5nXHJcbn0pO1xyXG5cclxuY29uc3QgbWFsaWNpb3NvID0gbmV3IFNjaGVtYSh7XHJcbiAgICB1c3VhcmlvczogQXJyYXlcclxufSk7XHJcblxyXG5cclxuY29uc3QgbWVzc2FnZXMgPSBuZXcgU2NoZW1hKHtcclxuICAgIF9pZDogU3RyaW5nLFxyXG4gICAgY2hhbm5lbDogU3RyaW5nLFxyXG4gICAgbWVzc2FnZXM6IEFycmF5XHJcbn0pO1xyXG5cclxuXHJcbmNvbnN0IGNvbmZpZ3VyYXRpb24gPSBuZXcgU2NoZW1hKHtcclxuICAgIF9pZDogU3RyaW5nLFxyXG4gICAgY2hhbm5lbDogU3RyaW5nLFxyXG4gICAgdXNlcnM6IEFycmF5LFxyXG4gICAgZXh0cmVtOiBCb29sZWFuLFxyXG4gICAgYXV0b2JhbjogQm9vbGVhbixcclxuICAgIHJvbGVzOiBCb29sZWFuXHJcbn0pO1xyXG5cclxuXHJcbi8vIEV4cG9ydGFuZG8gbG9zIGVzcXVlbWFzXHJcbmV4cG9ydCBjb25zdCBWaXAgPSBtb2RlbDxJVmlwPignVmlwcycsIHZpcCk7IC8vIFRoZSB1c2VycyB2aXAgW0JFVEFdXHJcbmV4cG9ydCBjb25zdCBDaGFubmVsID0gbW9kZWw8SUNoYW5uZWw+KCdDaGFubmVscycsIGNoYW5uZWwpOyAvLyBDaGFubmVscyB0byBwcm90ZWN0XHJcbmV4cG9ydCBjb25zdCBMYW5ncyA9IG1vZGVsPElMYW5ncz4oJ0xhbmdzJywgbGFuZ3MpOyAvLyBUaGUgbGFuZ3MgTE9MXHJcbmV4cG9ydCBjb25zdCBNYWxpY2lvc28gPSAgbW9kZWw8SU1hbGljaW9zbz4oJ01hbGljaW9zbycsIG1hbGljaW9zbyk7IC8vIEJhZCB1c2Vyc1xyXG5leHBvcnQgY29uc3QgTWVzc2FnZXMgPSBtb2RlbDxJTWVzc2FnZXM+KCdtZXNzYWdlcycsIG1lc3NhZ2VzKTsgLy8gVGhlIGNoYW5ubmVscyBhbmQgdGhlIG1lc3NhZ2VzIHRvIHNhdmUgaW4gdGhlIGRhdGFiYXNlXHJcbmV4cG9ydCBjb25zdCBSZWdpc3RyYWRvciA9IG1vZGVsPElSZWdpc3RyYWRvcj4oJ1JlZ2lzdHJhZG9yJywgY29uZmlndXJhdGlvbik7IC8vIEJvdCBjb25maWd1cmF0aW9uXHJcblxyXG5cclxuLy8gQ3JlYW5kbyB5IGV4cG9ydGFuZG8gbGFzIGludGVyZmFjZXNcclxuZXhwb3J0IGludGVyZmFjZSBJVmlwIGV4dGVuZHMgRG9jdW1lbnQge1xyXG4gICAgbGljZW5jZTogc3RyaW5nO1xyXG4gICAgZ3VpbGRJZDogc3RyaW5nO1xyXG4gICAgdGltZTogRGF0ZTtcclxuICAgIGJ1eWVyOiBzdHJpbmc7XHJcbn1cclxuZXhwb3J0IGludGVyZmFjZSBJQ2hhbm5lbCBleHRlbmRzIERvY3VtZW50IHtcclxuICAgIF9pZDogc3RyaW5nO1xyXG4gICAgY2hhbm5lbDogQXJyYXk8c3RyaW5nPjtcclxufVxyXG5leHBvcnQgaW50ZXJmYWNlIElMYW5ncyBleHRlbmRzIERvY3VtZW50IHtcclxuICAgIF9pZDogc3RyaW5nO1xyXG4gICAgbGFuZzogc3RyaW5nO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIElNYWxpY2lvc28gZXh0ZW5kcyBEb2N1bWVudCB7XHJcbiAgICB1c3VhcmlvczogQXJyYXk8c3RyaW5nPjtcclxufVxyXG5leHBvcnQgaW50ZXJmYWNlIElNZXNzYWdlcyBleHRlbmRzIERvY3VtZW50IHtcclxuICAgIF9pZDogc3RyaW5nO1xyXG4gICAgY2hhbm5lbDogc3RyaW5nO1xyXG4gICAgbWVzc2FnZXM6IEFycmF5PGFueT47XHJcbn1cclxuZXhwb3J0IGludGVyZmFjZSBJUmVnaXN0cmFkb3IgZXh0ZW5kcyBEb2N1bWVudCB7XHJcbiAgICBfaWQ6IHN0cmluZztcclxuICAgIGNoYW5uZWw6IHN0cmluZztcclxuICAgIHVzZXJzOiBBcnJheTxzdHJpbmc+O1xyXG4gICAgZXh0cmVtOiBCb29sZWFuO1xyXG4gICAgYXV0b2JhbjogQm9vbGVhbjtcclxuICAgIHJvbGVzOiBCb29sZWFuO1xyXG59Il19