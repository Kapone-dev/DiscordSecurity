"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const discord_js_1 = require("discord.js");
const lib_1 = require("../../lib");
class HelpCommand extends lib_1.CommandBase {
    constructor() {
        // Name, Category, alias, cooldown
        super('help', 'user', ['comandos', 'ayuda'], 3);
    }
    async run(bot, message, args) {
        const lang = bot.language.commands.help;
        const embed = new discord_js_1.MessageEmbed()
            .setAuthor(message.member.displayName, message.author.displayAvatarURL({ dynamic: true }))
            .setFooter(message.member.displayName, message.author.displayAvatarURL({ dynamic: true }))
            .setColor(message.member.displayHexColor);
        if (!args.length) {
            const user = bot.commands.array().filter(v => v.category === 'user');
            const admin = bot.commands.array().filter(v => v.category === 'Admin');
            embed.addFields({
                name: "User",
                value: `\`${user.map(value => value.name).join(", ")}\``
            }, {
                name: "Admin",
                value: `\`${admin.map(value => value.name).join(", ")}\``
            });
            return message.reply({ embeds: [embed] });
        }
        const command = bot.commands.get(args[0]);
        if (command) {
            embed.setDescription(lang.commandInfo.replace("%command%", command.name));
            embed.addFields({
                name: "Name",
                value: command.name
            }, {
                name: "Aliases",
                value: `\`${command.alias.join(", ")}\``
            }, {
                name: "Cooldown",
                value: command.cooldown || "0"
            });
            return message.reply({ embeds: [embed] });
        }
        embed.setDescription(lang.commandNotFound.replace("%command%", args[0]));
        return message.reply({ embeds: [embed] });
    }
}
exports.default = HelpCommand;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGVscC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21tYW5kcy91c2VyL2hlbHAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSwyQ0FBbUQ7QUFFbkQsbUNBQXdDO0FBQ3hDLE1BQXFCLFdBQVksU0FBUSxpQkFBVztJQUNoRDtRQUNJLGtDQUFrQztRQUNsQyxLQUFLLENBQUMsTUFBTSxFQUFFLE1BQU0sRUFBRSxDQUFDLFVBQVUsRUFBRSxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQTtJQUNuRCxDQUFDO0lBQ0QsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFRLEVBQUUsT0FBZ0IsRUFBRSxJQUFtQjtRQUNyRCxNQUFNLElBQUksR0FBRyxHQUFHLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUM7UUFDeEMsTUFBTSxLQUFLLEdBQUcsSUFBSSx5QkFBWSxFQUFFO2FBQzNCLFNBQVMsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLFdBQVcsRUFBRSxPQUFPLENBQUMsTUFBTSxDQUFDLGdCQUFnQixDQUFDLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7YUFDekYsU0FBUyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsV0FBVyxFQUFFLE9BQU8sQ0FBQyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQzthQUN6RixRQUFRLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxlQUFlLENBQUMsQ0FBQztRQUM5QyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUNkLE1BQU0sSUFBSSxHQUFHLEdBQUcsQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFFBQVEsS0FBSyxNQUFNLENBQUMsQ0FBQztZQUNyRSxNQUFNLEtBQUssR0FBRyxHQUFHLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxRQUFRLEtBQUssT0FBTyxDQUFDLENBQUM7WUFDdkUsS0FBSyxDQUFDLFNBQVMsQ0FBQztnQkFDWixJQUFJLEVBQUUsTUFBTTtnQkFDWixLQUFLLEVBQUUsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSTthQUMzRCxFQUFFO2dCQUNDLElBQUksRUFBRSxPQUFPO2dCQUNiLEtBQUssRUFBRSxLQUFLLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJO2FBQzVELENBQUMsQ0FBQztZQUNILE9BQU8sT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFDLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFDLENBQUMsQ0FBQztTQUMzQztRQUNELE1BQU0sT0FBTyxHQUFHLEdBQUcsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzFDLElBQUksT0FBTyxFQUFFO1lBQ1QsS0FBSyxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxXQUFXLEVBQUUsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7WUFDMUUsS0FBSyxDQUFDLFNBQVMsQ0FBQztnQkFDWixJQUFJLEVBQUUsTUFBTTtnQkFDWixLQUFLLEVBQUUsT0FBTyxDQUFDLElBQUk7YUFDdEIsRUFBRTtnQkFDQyxJQUFJLEVBQUUsU0FBUztnQkFDZixLQUFLLEVBQUUsS0FBSyxPQUFPLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSTthQUMzQyxFQUFFO2dCQUNDLElBQUksRUFBRSxVQUFVO2dCQUNoQixLQUFLLEVBQUUsT0FBTyxDQUFDLFFBQVEsSUFBSSxHQUFHO2FBQ2pDLENBQUMsQ0FBQztZQUNILE9BQU8sT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFDLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFDLENBQUMsQ0FBQztTQUMzQztRQUNELEtBQUssQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxPQUFPLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDekUsT0FBTyxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUMsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLEVBQUMsQ0FBQyxDQUFDO0lBQzVDLENBQUM7Q0FDSjtBQXpDRCw4QkF5Q0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBNZXNzYWdlLCBNZXNzYWdlRW1iZWQgfSBmcm9tICdkaXNjb3JkLmpzJztcclxuaW1wb3J0IEJvdCBmcm9tICcuLi8uLi9ib3QuanMnO1xyXG5pbXBvcnQgeyBDb21tYW5kQmFzZSB9IGZyb20gJy4uLy4uL2xpYic7XHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEhlbHBDb21tYW5kIGV4dGVuZHMgQ29tbWFuZEJhc2Uge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgLy8gTmFtZSwgQ2F0ZWdvcnksIGFsaWFzLCBjb29sZG93blxyXG4gICAgICAgIHN1cGVyKCdoZWxwJywgJ3VzZXInLCBbJ2NvbWFuZG9zJywgJ2F5dWRhJ10sIDMpXHJcbiAgICB9XHJcbiAgICBhc3luYyBydW4oYm90OiBCb3QsIG1lc3NhZ2U6IE1lc3NhZ2UsIGFyZ3M6IEFycmF5PHN0cmluZz4pIHtcclxuICAgICAgICBjb25zdCBsYW5nID0gYm90Lmxhbmd1YWdlLmNvbW1hbmRzLmhlbHA7XHJcbiAgICAgICAgY29uc3QgZW1iZWQgPSBuZXcgTWVzc2FnZUVtYmVkKClcclxuICAgICAgICAgICAgLnNldEF1dGhvcihtZXNzYWdlLm1lbWJlci5kaXNwbGF5TmFtZSwgbWVzc2FnZS5hdXRob3IuZGlzcGxheUF2YXRhclVSTCh7IGR5bmFtaWM6IHRydWUgfSkpXHJcbiAgICAgICAgICAgIC5zZXRGb290ZXIobWVzc2FnZS5tZW1iZXIuZGlzcGxheU5hbWUsIG1lc3NhZ2UuYXV0aG9yLmRpc3BsYXlBdmF0YXJVUkwoeyBkeW5hbWljOiB0cnVlIH0pKVxyXG4gICAgICAgICAgICAuc2V0Q29sb3IobWVzc2FnZS5tZW1iZXIuZGlzcGxheUhleENvbG9yKTtcclxuICAgICAgICBpZiAoIWFyZ3MubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHVzZXIgPSBib3QuY29tbWFuZHMuYXJyYXkoKS5maWx0ZXIodiA9PiB2LmNhdGVnb3J5ID09PSAndXNlcicpO1xyXG4gICAgICAgICAgICBjb25zdCBhZG1pbiA9IGJvdC5jb21tYW5kcy5hcnJheSgpLmZpbHRlcih2ID0+IHYuY2F0ZWdvcnkgPT09ICdBZG1pbicpO1xyXG4gICAgICAgICAgICBlbWJlZC5hZGRGaWVsZHMoe1xyXG4gICAgICAgICAgICAgICAgbmFtZTogXCJVc2VyXCIsXHJcbiAgICAgICAgICAgICAgICB2YWx1ZTogYFxcYCR7dXNlci5tYXAodmFsdWUgPT4gdmFsdWUubmFtZSkuam9pbihcIiwgXCIpfVxcYGBcclxuICAgICAgICAgICAgfSwge1xyXG4gICAgICAgICAgICAgICAgbmFtZTogXCJBZG1pblwiLFxyXG4gICAgICAgICAgICAgICAgdmFsdWU6IGBcXGAke2FkbWluLm1hcCh2YWx1ZSA9PiB2YWx1ZS5uYW1lKS5qb2luKFwiLCBcIil9XFxgYFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgcmV0dXJuIG1lc3NhZ2UucmVwbHkoe2VtYmVkczogW2VtYmVkXX0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBjb21tYW5kID0gYm90LmNvbW1hbmRzLmdldChhcmdzWzBdKTtcclxuICAgICAgICBpZiAoY29tbWFuZCkge1xyXG4gICAgICAgICAgICBlbWJlZC5zZXREZXNjcmlwdGlvbihsYW5nLmNvbW1hbmRJbmZvLnJlcGxhY2UoXCIlY29tbWFuZCVcIiwgY29tbWFuZC5uYW1lKSk7XHJcbiAgICAgICAgICAgIGVtYmVkLmFkZEZpZWxkcyh7XHJcbiAgICAgICAgICAgICAgICBuYW1lOiBcIk5hbWVcIixcclxuICAgICAgICAgICAgICAgIHZhbHVlOiBjb21tYW5kLm5hbWVcclxuICAgICAgICAgICAgfSwge1xyXG4gICAgICAgICAgICAgICAgbmFtZTogXCJBbGlhc2VzXCIsXHJcbiAgICAgICAgICAgICAgICB2YWx1ZTogYFxcYCR7Y29tbWFuZC5hbGlhcy5qb2luKFwiLCBcIil9XFxgYFxyXG4gICAgICAgICAgICB9LCB7XHJcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkNvb2xkb3duXCIsXHJcbiAgICAgICAgICAgICAgICB2YWx1ZTogY29tbWFuZC5jb29sZG93biB8fCBcIjBcIlxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgcmV0dXJuIG1lc3NhZ2UucmVwbHkoe2VtYmVkczogW2VtYmVkXX0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbWJlZC5zZXREZXNjcmlwdGlvbihsYW5nLmNvbW1hbmROb3RGb3VuZC5yZXBsYWNlKFwiJWNvbW1hbmQlXCIsIGFyZ3NbMF0pKTtcclxuICAgICAgICByZXR1cm4gbWVzc2FnZS5yZXBseSh7ZW1iZWRzOiBbZW1iZWRdfSk7XHJcbiAgICB9XHJcbn0iXX0=