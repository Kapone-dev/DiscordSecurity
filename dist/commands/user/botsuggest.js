"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const discord_js_1 = require("discord.js");
const lib_1 = require("../../lib");
class BotSuggestCommand extends lib_1.CommandBase {
    constructor() {
        // Name, Category, alias, cooldown
        super('botsuggest', 'user', ["bot-suggest", "sugerir"], 15);
    }
    async run(bot, message, args) {
        const lang = bot.language.commands.suggest;
        const suggest = args.join(" ");
        if (!suggest)
            return message.channel.send(lang.noSuggest);
        let image;
        if (message.attachments.first())
            image = message.attachments.first().url;
        else
            image = null;
        const channel = await bot.client.channels.fetch(`${BigInt(process.env.SUGERENCIAS)}`).catch(() => null);
        if (!channel)
            return;
        const embed = new discord_js_1.MessageEmbed()
            .setAuthor(message.member.displayName, message.author.avatarURL({ dynamic: true }))
            .setDescription(suggest.substring(0, 2047))
            .setColor(0xffa5b5)
            .setFooter(message.author.tag, message.author.avatarURL({ dynamic: true }));
        if (image)
            embed.setImage(image);
        channel.send({ embeds: [embed] });
        const sended = new discord_js_1.MessageEmbed().setAuthor(message.member.displayName, message.author.avatarURL({ dynamic: true })).setDescription(lang.description).setFooter(`0xffa5b5`);
        message.channel.send({ embeds: [sended] });
    }
}
exports.default = BotSuggestCommand;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYm90c3VnZ2VzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21tYW5kcy91c2VyL2JvdHN1Z2dlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFDQSwyQ0FBMEM7QUFFMUMsbUNBQXdDO0FBQ3hDLE1BQXFCLGlCQUFrQixTQUFRLGlCQUFXO0lBQ3REO1FBQ0ksa0NBQWtDO1FBQ2xDLEtBQUssQ0FBQyxZQUFZLEVBQUUsTUFBTSxFQUFFLENBQUMsYUFBYSxFQUFFLFNBQVMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFBO0lBQy9ELENBQUM7SUFDRCxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQVEsRUFBRSxPQUFnQixFQUFFLElBQW1CO1FBQ3JELE1BQU0sSUFBSSxHQUFHLEdBQUcsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQztRQUMzQyxNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQy9CLElBQUksQ0FBQyxPQUFPO1lBQUUsT0FBTyxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDMUQsSUFBSSxLQUFvQixDQUFDO1FBQ3pCLElBQUksT0FBTyxDQUFDLFdBQVcsQ0FBQyxLQUFLLEVBQUU7WUFBRSxLQUFLLEdBQUcsT0FBTyxDQUFDLFdBQVcsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxHQUFHLENBQUM7O1lBQ3BFLEtBQUssR0FBRyxJQUFJLENBQUM7UUFFbEIsTUFBTSxPQUFPLEdBQXVCLE1BQU0sR0FBRyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUU1SCxJQUFJLENBQUMsT0FBTztZQUFFLE9BQU87UUFDckIsTUFBTSxLQUFLLEdBQUcsSUFBSSx5QkFBWSxFQUFFO2FBQzNCLFNBQVMsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLFdBQVcsRUFBRSxPQUFPLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO2FBQ2xGLGNBQWMsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQzthQUMxQyxRQUFRLENBQUMsUUFBUSxDQUFDO2FBQ2xCLFNBQVMsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxPQUFPLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDaEYsSUFBSSxLQUFLO1lBQUUsS0FBSyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNqQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ2xDLE1BQU0sTUFBTSxHQUFHLElBQUkseUJBQVksRUFBRSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLFdBQVcsRUFBRSxPQUFPLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDNUssT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBQyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsRUFBQyxDQUFDLENBQUM7SUFDN0MsQ0FBQztDQUNKO0FBMUJELG9DQTBCQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE1lc3NhZ2UsIFRleHRDaGFubmVsIH0gZnJvbSAnZGlzY29yZC5qcyc7XHJcbmltcG9ydCB7IE1lc3NhZ2VFbWJlZCB9IGZyb20gJ2Rpc2NvcmQuanMnO1xyXG5pbXBvcnQgQm90IGZyb20gJy4uLy4uL2JvdCc7XHJcbmltcG9ydCB7IENvbW1hbmRCYXNlIH0gZnJvbSAnLi4vLi4vbGliJztcclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQm90U3VnZ2VzdENvbW1hbmQgZXh0ZW5kcyBDb21tYW5kQmFzZSB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICAvLyBOYW1lLCBDYXRlZ29yeSwgYWxpYXMsIGNvb2xkb3duXHJcbiAgICAgICAgc3VwZXIoJ2JvdHN1Z2dlc3QnLCAndXNlcicsIFtcImJvdC1zdWdnZXN0XCIsIFwic3VnZXJpclwiXSwgMTUpXHJcbiAgICB9XHJcbiAgICBhc3luYyBydW4oYm90OiBCb3QsIG1lc3NhZ2U6IE1lc3NhZ2UsIGFyZ3M6IEFycmF5PHN0cmluZz4pIHtcclxuICAgICAgICBjb25zdCBsYW5nID0gYm90Lmxhbmd1YWdlLmNvbW1hbmRzLnN1Z2dlc3Q7XHJcbiAgICAgICAgY29uc3Qgc3VnZ2VzdCA9IGFyZ3Muam9pbihcIiBcIik7XHJcbiAgICAgICAgaWYgKCFzdWdnZXN0KSByZXR1cm4gbWVzc2FnZS5jaGFubmVsLnNlbmQobGFuZy5ub1N1Z2dlc3QpO1xyXG4gICAgICAgIGxldCBpbWFnZTogc3RyaW5nIHwgbnVsbDtcclxuICAgICAgICBpZiAobWVzc2FnZS5hdHRhY2htZW50cy5maXJzdCgpKSBpbWFnZSA9IG1lc3NhZ2UuYXR0YWNobWVudHMuZmlyc3QoKS51cmw7XHJcbiAgICAgICAgZWxzZSBpbWFnZSA9IG51bGw7XHJcblxyXG4gICAgICAgIGNvbnN0IGNoYW5uZWw6IHZvaWQgfCBUZXh0Q2hhbm5lbCA9IGF3YWl0IGJvdC5jbGllbnQuY2hhbm5lbHMuZmV0Y2goYCR7QmlnSW50KHByb2Nlc3MuZW52LlNVR0VSRU5DSUFTKX1gKS5jYXRjaCgoKSA9PiBudWxsKTtcclxuICAgICAgICBcclxuICAgICAgICBpZiAoIWNoYW5uZWwpIHJldHVybjtcclxuICAgICAgICBjb25zdCBlbWJlZCA9IG5ldyBNZXNzYWdlRW1iZWQoKVxyXG4gICAgICAgICAgICAuc2V0QXV0aG9yKG1lc3NhZ2UubWVtYmVyLmRpc3BsYXlOYW1lLCBtZXNzYWdlLmF1dGhvci5hdmF0YXJVUkwoeyBkeW5hbWljOiB0cnVlIH0pKVxyXG4gICAgICAgICAgICAuc2V0RGVzY3JpcHRpb24oc3VnZ2VzdC5zdWJzdHJpbmcoMCwgMjA0NykpXHJcbiAgICAgICAgICAgIC5zZXRDb2xvcigweGZmYTViNSlcclxuICAgICAgICAgICAgLnNldEZvb3RlcihtZXNzYWdlLmF1dGhvci50YWcsIG1lc3NhZ2UuYXV0aG9yLmF2YXRhclVSTCh7IGR5bmFtaWM6IHRydWUgfSkpO1xyXG4gICAgICAgIGlmIChpbWFnZSkgZW1iZWQuc2V0SW1hZ2UoaW1hZ2UpO1xyXG4gICAgICAgIGNoYW5uZWwuc2VuZCh7IGVtYmVkczogW2VtYmVkXSB9KTtcclxuICAgICAgICBjb25zdCBzZW5kZWQgPSBuZXcgTWVzc2FnZUVtYmVkKCkuc2V0QXV0aG9yKG1lc3NhZ2UubWVtYmVyLmRpc3BsYXlOYW1lLCBtZXNzYWdlLmF1dGhvci5hdmF0YXJVUkwoeyBkeW5hbWljOiB0cnVlIH0pKS5zZXREZXNjcmlwdGlvbihsYW5nLmRlc2NyaXB0aW9uKS5zZXRGb290ZXIoYDB4ZmZhNWI1YCk7XHJcbiAgICAgICAgbWVzc2FnZS5jaGFubmVsLnNlbmQoe2VtYmVkczogW3NlbmRlZF19KTtcclxuICAgIH1cclxufSJdfQ==