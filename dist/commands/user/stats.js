"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const cpu_stat_1 = __importDefault(require("cpu-stat"));
const moment_1 = __importDefault(require("moment"));
require("moment-duration-format");
const util_1 = require("util");
const usagePercent = util_1.promisify(cpu_stat_1.default.usagePercent);
const lib_1 = require("../../lib");
const discord_js_1 = require("discord.js");
class StatsCommand extends lib_1.CommandBase {
    constructor() {
        // Name, Category, alias, cooldown
        super('stats', 'user', [], 3);
    }
    async run(bot, message) {
        const percent = await usagePercent();
        const mem = process.memoryUsage();
        const memoryU = memory(mem.rss);
        const embedStats = new discord_js_1.MessageEmbed()
            .setTitle("***__~~`Stats`~~__***")
            .setColor(0x2f3136)
            .addField(`Bot RAM usage`, memoryU, true)
            .addField("Uptime ", `${moment_1.default.duration(Date.now() - bot.client.readyTimestamp, "ms").format("d [days], h [hours], m [minutes]")}`, true)
            .addField("NodeJS version", `${process.version}`, true)
            .addField("CPU usage", `\`${percent.toFixed(2)}%\``, true)
            .addField("Developer", `${bot.client.users.cache.get("733060948209696819")?.tag || "Kapone#1001"}`);
        await message.channel.send({ embeds: [embedStats] });
    }
}
exports.default = StatsCommand;
function memory(bytes = 0, r = true) {
    const gigaBytes = bytes / 1024 ** 3;
    if (gigaBytes > 1) {
        return `${gigaBytes.toFixed(1)} ${r ? "GB" : ""}`;
    }
    const megaBytes = bytes / 1024 ** 2;
    if (megaBytes > 1) {
        return `${megaBytes.toFixed(2)} ${r ? "MB" : ""}`;
    }
    const kiloBytes = bytes / 1024;
    if (kiloBytes > 1) {
        return `${kiloBytes.toFixed(2)} ${r ? "KB" : ""}`;
    }
    return `${bytes.toFixed(2)} ${r ? "B" : ""}`;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhdHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29tbWFuZHMvdXNlci9zdGF0cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLHdEQUErQjtBQUMvQixvREFBNEI7QUFDNUIsa0NBQWdDO0FBQ2hDLCtCQUFpQztBQUNqQyxNQUFNLFlBQVksR0FBRyxnQkFBUyxDQUFDLGtCQUFPLENBQUMsWUFBWSxDQUFDLENBQUM7QUFFckQsbUNBQXdDO0FBRXhDLDJDQUFtRDtBQUNuRCxNQUFxQixZQUFhLFNBQVEsaUJBQVc7SUFDakQ7UUFDSSxrQ0FBa0M7UUFDbEMsS0FBSyxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFBO0lBQ2pDLENBQUM7SUFDRCxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQVEsRUFBRSxPQUFnQjtRQUNoQyxNQUFNLE9BQU8sR0FBRyxNQUFNLFlBQVksRUFBRSxDQUFDO1FBQ3JDLE1BQU0sR0FBRyxHQUFHLE9BQU8sQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUNsQyxNQUFNLE9BQU8sR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ2hDLE1BQU0sVUFBVSxHQUFHLElBQUkseUJBQVksRUFBRTthQUNoQyxRQUFRLENBQUMsdUJBQXVCLENBQUM7YUFDakMsUUFBUSxDQUFDLFFBQVEsQ0FBQzthQUNsQixRQUFRLENBQUMsZUFBZSxFQUFFLE9BQU8sRUFBRSxJQUFJLENBQUM7YUFDeEMsUUFBUSxDQUFDLFNBQVMsRUFBRSxHQUFHLGdCQUFNLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDLGNBQWMsRUFBRSxJQUFJLENBQUMsQ0FBQyxNQUFNLENBQUMsa0NBQWtDLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQzthQUN4SSxRQUFRLENBQUMsZ0JBQWdCLEVBQUUsR0FBRyxPQUFPLENBQUMsT0FBTyxFQUFFLEVBQUUsSUFBSSxDQUFDO2FBQ3RELFFBQVEsQ0FBQyxXQUFXLEVBQUUsS0FBSyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDO2FBQ3pELFFBQVEsQ0FBQyxXQUFXLEVBQUUsR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLG9CQUFvQixDQUFDLEVBQUUsR0FBRyxJQUFJLGFBQWEsRUFBRSxDQUFDLENBQUM7UUFDeEcsTUFBTSxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFDLE1BQU0sRUFBRSxDQUFDLFVBQVUsQ0FBQyxFQUFDLENBQUMsQ0FBQztJQUN2RCxDQUFDO0NBQ0o7QUFuQkQsK0JBbUJDO0FBRUQsU0FBUyxNQUFNLENBQUMsS0FBSyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSTtJQUMvQixNQUFNLFNBQVMsR0FBRyxLQUFLLEdBQUcsSUFBSSxJQUFJLENBQUMsQ0FBQztJQUNwQyxJQUFJLFNBQVMsR0FBRyxDQUFDLEVBQUU7UUFDZixPQUFPLEdBQUcsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUM7S0FDckQ7SUFFRCxNQUFNLFNBQVMsR0FBRyxLQUFLLEdBQUcsSUFBSSxJQUFJLENBQUMsQ0FBQztJQUNwQyxJQUFJLFNBQVMsR0FBRyxDQUFDLEVBQUU7UUFDZixPQUFPLEdBQUcsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUM7S0FDckQ7SUFFRCxNQUFNLFNBQVMsR0FBRyxLQUFLLEdBQUcsSUFBSSxDQUFDO0lBQy9CLElBQUksU0FBUyxHQUFHLENBQUMsRUFBRTtRQUNmLE9BQU8sR0FBRyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQztLQUNyRDtJQUVELE9BQU8sR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQztBQUNqRCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNwdVN0YXQgZnJvbSBcImNwdS1zdGF0XCI7XHJcbmltcG9ydCBtb21lbnQgZnJvbSBcIm1vbWVudFwiO1xyXG5pbXBvcnQgXCJtb21lbnQtZHVyYXRpb24tZm9ybWF0XCI7XHJcbmltcG9ydCB7IHByb21pc2lmeSB9IGZyb20gXCJ1dGlsXCI7XHJcbmNvbnN0IHVzYWdlUGVyY2VudCA9IHByb21pc2lmeShjcHVTdGF0LnVzYWdlUGVyY2VudCk7XHJcblxyXG5pbXBvcnQgeyBDb21tYW5kQmFzZSB9IGZyb20gJy4uLy4uL2xpYic7XHJcbmltcG9ydCBCb3QgZnJvbSBcIi4uLy4uL2JvdFwiO1xyXG5pbXBvcnQgeyBNZXNzYWdlLCBNZXNzYWdlRW1iZWQgfSBmcm9tIFwiZGlzY29yZC5qc1wiO1xyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTdGF0c0NvbW1hbmQgZXh0ZW5kcyBDb21tYW5kQmFzZSB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICAvLyBOYW1lLCBDYXRlZ29yeSwgYWxpYXMsIGNvb2xkb3duXHJcbiAgICAgICAgc3VwZXIoJ3N0YXRzJywgJ3VzZXInLCBbXSwgMylcclxuICAgIH1cclxuICAgIGFzeW5jIHJ1bihib3Q6IEJvdCwgbWVzc2FnZTogTWVzc2FnZSkge1xyXG4gICAgICAgIGNvbnN0IHBlcmNlbnQgPSBhd2FpdCB1c2FnZVBlcmNlbnQoKTtcclxuICAgICAgICBjb25zdCBtZW0gPSBwcm9jZXNzLm1lbW9yeVVzYWdlKCk7XHJcbiAgICAgICAgY29uc3QgbWVtb3J5VSA9IG1lbW9yeShtZW0ucnNzKTtcclxuICAgICAgICBjb25zdCBlbWJlZFN0YXRzID0gbmV3IE1lc3NhZ2VFbWJlZCgpXHJcbiAgICAgICAgICAgIC5zZXRUaXRsZShcIioqKl9ffn5gU3RhdHNgfn5fXyoqKlwiKVxyXG4gICAgICAgICAgICAuc2V0Q29sb3IoMHgyZjMxMzYpXHJcbiAgICAgICAgICAgIC5hZGRGaWVsZChgQm90IFJBTSB1c2FnZWAsIG1lbW9yeVUsIHRydWUpXHJcbiAgICAgICAgICAgIC5hZGRGaWVsZChcIlVwdGltZSBcIiwgYCR7bW9tZW50LmR1cmF0aW9uKERhdGUubm93KCkgLSBib3QuY2xpZW50LnJlYWR5VGltZXN0YW1wLCBcIm1zXCIpLmZvcm1hdChcImQgW2RheXNdLCBoIFtob3Vyc10sIG0gW21pbnV0ZXNdXCIpfWAsIHRydWUpXHJcbiAgICAgICAgICAgIC5hZGRGaWVsZChcIk5vZGVKUyB2ZXJzaW9uXCIsIGAke3Byb2Nlc3MudmVyc2lvbn1gLCB0cnVlKVxyXG4gICAgICAgICAgICAuYWRkRmllbGQoXCJDUFUgdXNhZ2VcIiwgYFxcYCR7cGVyY2VudC50b0ZpeGVkKDIpfSVcXGBgLCB0cnVlKVxyXG4gICAgICAgICAgICAuYWRkRmllbGQoXCJEZXZlbG9wZXJcIiwgYCR7Ym90LmNsaWVudC51c2Vycy5jYWNoZS5nZXQoXCI3MzMwNjA5NDgyMDk2OTY4MTlcIik/LnRhZyB8fCBcIkthcG9uZSMxMDAxXCJ9YCk7XHJcbiAgICAgICAgYXdhaXQgbWVzc2FnZS5jaGFubmVsLnNlbmQoe2VtYmVkczogW2VtYmVkU3RhdHNdfSk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIG1lbW9yeShieXRlcyA9IDAsIHIgPSB0cnVlKSB7XHJcbiAgICBjb25zdCBnaWdhQnl0ZXMgPSBieXRlcyAvIDEwMjQgKiogMztcclxuICAgIGlmIChnaWdhQnl0ZXMgPiAxKSB7XHJcbiAgICAgICAgcmV0dXJuIGAke2dpZ2FCeXRlcy50b0ZpeGVkKDEpfSAke3IgPyBcIkdCXCIgOiBcIlwifWA7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgbWVnYUJ5dGVzID0gYnl0ZXMgLyAxMDI0ICoqIDI7XHJcbiAgICBpZiAobWVnYUJ5dGVzID4gMSkge1xyXG4gICAgICAgIHJldHVybiBgJHttZWdhQnl0ZXMudG9GaXhlZCgyKX0gJHtyID8gXCJNQlwiIDogXCJcIn1gO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGtpbG9CeXRlcyA9IGJ5dGVzIC8gMTAyNDtcclxuICAgIGlmIChraWxvQnl0ZXMgPiAxKSB7XHJcbiAgICAgICAgcmV0dXJuIGAke2tpbG9CeXRlcy50b0ZpeGVkKDIpfSAke3IgPyBcIktCXCIgOiBcIlwifWA7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGAke2J5dGVzLnRvRml4ZWQoMil9ICR7ciA/IFwiQlwiIDogXCJcIn1gO1xyXG59Il19