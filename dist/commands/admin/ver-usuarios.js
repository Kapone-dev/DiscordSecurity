"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const discord_js_1 = require("discord.js");
const database_1 = require("../../database/");
const lib_1 = require("../../lib");
class VewUsuariosCommand extends lib_1.CommandBase {
    constructor() {
        super('ver-usuarios', 'Admin', ["whitelist-view", "white-list-view", "view-users"], 300);
    }
    async run(bot, message, args) {
        const lang = bot.language.commands.verUsuarios;
        const search = await database_1.Registrador.findById(message.guild.id);
        if (!search)
            return message.channel.send(bot.language.global.noSearch);
        const users = [];
        if (search.users.length <= 0)
            return message.channel.send(lang.noUsuario);
        for (let i = 0; i < search.users.length; i++) {
            const user = await bot.client.users.fetch(`${BigInt(search.users[i])}`);
            users.push("#" + (i + 1) + " " + user.tag);
        }
        const embed = new discord_js_1.MessageEmbed()
            .setDescription(users.join("\n"))
            .setAuthor(message.member.displayName, message.author.avatarURL({ dynamic: true }));
        message.channel.send({ embeds: [embed] });
    }
}
exports.default = VewUsuariosCommand;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmVyLXVzdWFyaW9zLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NvbW1hbmRzL2FkbWluL3Zlci11c3Vhcmlvcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDJDQUFtRDtBQUVuRCw4Q0FBNEM7QUFDNUMsbUNBQXdDO0FBQ3hDLE1BQXFCLGtCQUFtQixTQUFRLGlCQUFXO0lBQ3ZEO1FBQ0ksS0FBSyxDQUFDLGNBQWMsRUFBRSxPQUFPLEVBQUUsQ0FBQyxnQkFBZ0IsRUFBRSxpQkFBaUIsRUFBRSxZQUFZLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQTtJQUM1RixDQUFDO0lBQ0QsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFRLEVBQUUsT0FBZ0IsRUFBRSxJQUFtQjtRQUNyRCxNQUFNLElBQUksR0FBRyxHQUFHLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUM7UUFDL0MsTUFBTSxNQUFNLEdBQUcsTUFBTSxzQkFBVyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQzVELElBQUksQ0FBQyxNQUFNO1lBQUUsT0FBTyxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQTtRQUV0RSxNQUFNLEtBQUssR0FBa0IsRUFBRSxDQUFDO1FBQ2hDLElBQUksTUFBTSxDQUFDLEtBQUssQ0FBQyxNQUFNLElBQUksQ0FBQztZQUFFLE9BQU8sT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFBO1FBQ3pFLEtBQUssSUFBSSxDQUFDLEdBQVcsQ0FBQyxFQUFFLENBQUMsR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUNsRCxNQUFNLElBQUksR0FBRyxNQUFNLEdBQUcsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQ3hFLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUE7U0FDN0M7UUFDRCxNQUFNLEtBQUssR0FBRyxJQUFJLHlCQUFZLEVBQUU7YUFDL0IsY0FBYyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7YUFDaEMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsV0FBVyxFQUFFLE9BQU8sQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQztRQUNwRixPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFDLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFDLENBQUMsQ0FBQztJQUM1QyxDQUFDO0NBQ0o7QUFwQkQscUNBb0JDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTWVzc2FnZSwgTWVzc2FnZUVtYmVkIH0gZnJvbSAnZGlzY29yZC5qcyc7XHJcbmltcG9ydCBCb3QgZnJvbSAnLi4vLi4vYm90LmpzJztcclxuaW1wb3J0IHtSZWdpc3RyYWRvcn0gZnJvbSBcIi4uLy4uL2RhdGFiYXNlL1wiO1xyXG5pbXBvcnQgeyBDb21tYW5kQmFzZSB9IGZyb20gJy4uLy4uL2xpYic7XHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFZld1VzdWFyaW9zQ29tbWFuZCBleHRlbmRzIENvbW1hbmRCYXNlIHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKCd2ZXItdXN1YXJpb3MnLCAnQWRtaW4nLCBbXCJ3aGl0ZWxpc3Qtdmlld1wiLCBcIndoaXRlLWxpc3Qtdmlld1wiLCBcInZpZXctdXNlcnNcIl0sIDMwMClcclxuICAgIH1cclxuICAgIGFzeW5jIHJ1bihib3Q6IEJvdCwgbWVzc2FnZTogTWVzc2FnZSwgYXJnczogQXJyYXk8c3RyaW5nPikge1xyXG4gICAgICAgIGNvbnN0IGxhbmcgPSBib3QubGFuZ3VhZ2UuY29tbWFuZHMudmVyVXN1YXJpb3M7XHJcbiAgICAgICAgY29uc3Qgc2VhcmNoID0gYXdhaXQgUmVnaXN0cmFkb3IuZmluZEJ5SWQobWVzc2FnZS5ndWlsZC5pZCk7XHJcbiAgICAgICAgaWYgKCFzZWFyY2gpIHJldHVybiBtZXNzYWdlLmNoYW5uZWwuc2VuZChib3QubGFuZ3VhZ2UuZ2xvYmFsLm5vU2VhcmNoKVxyXG5cclxuICAgICAgICBjb25zdCB1c2VyczogQXJyYXk8c3RyaW5nPiA9IFtdO1xyXG4gICAgICAgIGlmIChzZWFyY2gudXNlcnMubGVuZ3RoIDw9IDApIHJldHVybiBtZXNzYWdlLmNoYW5uZWwuc2VuZChsYW5nLm5vVXN1YXJpbylcclxuICAgICAgICBmb3IgKGxldCBpOiBudW1iZXIgPSAwOyBpIDwgc2VhcmNoLnVzZXJzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHVzZXIgPSBhd2FpdCBib3QuY2xpZW50LnVzZXJzLmZldGNoKGAke0JpZ0ludChzZWFyY2gudXNlcnNbaV0pfWApO1xyXG4gICAgICAgICAgICB1c2Vycy5wdXNoKFwiI1wiICsgKGkgKyAxKSArIFwiIFwiICsgdXNlci50YWcpXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGVtYmVkID0gbmV3IE1lc3NhZ2VFbWJlZCgpXHJcbiAgICAgICAgLnNldERlc2NyaXB0aW9uKHVzZXJzLmpvaW4oXCJcXG5cIikpXHJcbiAgICAgICAgLnNldEF1dGhvcihtZXNzYWdlLm1lbWJlci5kaXNwbGF5TmFtZSwgbWVzc2FnZS5hdXRob3IuYXZhdGFyVVJMKHsgZHluYW1pYzogdHJ1ZSB9KSk7XHJcbiAgICAgICAgbWVzc2FnZS5jaGFubmVsLnNlbmQoe2VtYmVkczogW2VtYmVkXX0pO1xyXG4gICAgfVxyXG59Il19