"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const database_1 = require("../../database/");
const lib_1 = require("../../lib");
const discord_js_1 = require("discord.js");
class ForceBanCommand extends lib_1.CommandBase {
    constructor() {
        // Name, Category, alias, cooldown
        super('force-ban', 'Admin', ["forceban"], 1500);
    }
    async run(bot, message, args) {
        if (!message.member.permissions.has("ADMINISTRATOR"))
            return message.channel.send(bot.language.global.noPerms);
        const lang = bot.language.commands.forceban;
        const users = await database_1.Malicioso.findOne();
        if (!users)
            return message.channel.send(lang.noUsers);
        const msg = await message.channel.send(lang.baneado);
        let noBans = 0;
        let banneds = 0;
        for (const usersId of users.usuarios) {
            await discord_js_1.Util.delayFor(5000); // This will allow the API not to be abused by waiting 5 seconds
            const userToBan = bot.client.users.cache.get(`${BigInt(usersId)}`) || await bot.client.users.fetch(`${BigInt(usersId)}`);
            if (userToBan) {
                await message.guild.members.ban(userToBan, { days: 7, reason: lang.reason }).catch(() => { noBans++; });
            }
            banneds++;
        }
        ;
        const embed = new discord_js_1.MessageEmbed()
            .setAuthor(message.member.displayName, message.author.avatarURL({ dynamic: true }))
            .setDescription(lang.desc)
            .addFields({
            name: lang.ready,
            value: `${banneds - noBans}`,
            inline: true
        }, {
            name: lang.errores,
            value: `${noBans}`,
            inline: true
        });
        await msg.edit({ embeds: [embed] });
    }
}
exports.default = ForceBanCommand;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9yY2UtYmFuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NvbW1hbmRzL2FkbWluL2ZvcmNlLWJhbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDhDQUEwQztBQUMxQyxtQ0FBd0M7QUFFeEMsMkNBQXlEO0FBQ3pELE1BQXFCLGVBQWdCLFNBQVEsaUJBQVc7SUFDcEQ7UUFDSSxrQ0FBa0M7UUFDbEMsS0FBSyxDQUFDLFdBQVcsRUFBRSxPQUFPLEVBQUUsQ0FBQyxVQUFVLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQTtJQUNuRCxDQUFDO0lBQ0QsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFRLEVBQUUsT0FBZ0IsRUFBRSxJQUFjO1FBQ2hELElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUFDO1lBQUUsT0FBTyxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUMvRyxNQUFNLElBQUksR0FBRyxHQUFHLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUM7UUFDNUMsTUFBTSxLQUFLLEdBQUcsTUFBTSxvQkFBUyxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQ3hDLElBQUksQ0FBQyxLQUFLO1lBQUUsT0FBTyxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUE7UUFDckQsTUFBTSxHQUFHLEdBQUcsTUFBTSxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDckQsSUFBSSxNQUFNLEdBQVcsQ0FBQyxDQUFDO1FBQ3ZCLElBQUksT0FBTyxHQUFXLENBQUMsQ0FBQztRQUN4QixLQUFLLE1BQU0sT0FBTyxJQUFJLEtBQUssQ0FBQyxRQUFRLEVBQUU7WUFDbEMsTUFBTSxpQkFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLGdFQUFnRTtZQUMzRixNQUFNLFNBQVMsR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsSUFBSSxNQUFNLEdBQUcsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDekgsSUFBSSxTQUFTLEVBQUU7Z0JBQ1gsTUFBTSxPQUFPLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsU0FBUyxFQUFFLEVBQUUsSUFBSSxFQUFFLENBQUMsRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRSxHQUFHLE1BQU0sRUFBRSxDQUFBLENBQUMsQ0FBQyxDQUFDLENBQUM7YUFDMUc7WUFDRCxPQUFPLEVBQUUsQ0FBQztTQUNiO1FBQUEsQ0FBQztRQUNGLE1BQU0sS0FBSyxHQUFHLElBQUkseUJBQVksRUFBRTthQUMzQixTQUFTLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxXQUFXLEVBQUUsT0FBTyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQzthQUNsRixjQUFjLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQzthQUN6QixTQUFTLENBQUM7WUFDSCxJQUFJLEVBQUUsSUFBSSxDQUFDLEtBQUs7WUFDaEIsS0FBSyxFQUFFLEdBQUcsT0FBTyxHQUFHLE1BQU0sRUFBRTtZQUM1QixNQUFNLEVBQUUsSUFBSTtTQUNmLEVBQ0Q7WUFDSSxJQUFJLEVBQUUsSUFBSSxDQUFDLE9BQU87WUFDbEIsS0FBSyxFQUFFLEdBQUcsTUFBTSxFQUFFO1lBQ2xCLE1BQU0sRUFBRSxJQUFJO1NBQ2YsQ0FBQyxDQUFDO1FBQ1gsTUFBTSxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ3hDLENBQUM7Q0FDSjtBQXBDRCxrQ0FvQ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge01hbGljaW9zb30gZnJvbSBcIi4uLy4uL2RhdGFiYXNlL1wiO1xyXG5pbXBvcnQgeyBDb21tYW5kQmFzZSB9IGZyb20gJy4uLy4uL2xpYic7XHJcbmltcG9ydCBCb3QgZnJvbSBcIi4uLy4uL2JvdFwiO1xyXG5pbXBvcnQgeyBNZXNzYWdlLCBVdGlsLCBNZXNzYWdlRW1iZWQgfSBmcm9tIFwiZGlzY29yZC5qc1wiO1xyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBGb3JjZUJhbkNvbW1hbmQgZXh0ZW5kcyBDb21tYW5kQmFzZSB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICAvLyBOYW1lLCBDYXRlZ29yeSwgYWxpYXMsIGNvb2xkb3duXHJcbiAgICAgICAgc3VwZXIoJ2ZvcmNlLWJhbicsICdBZG1pbicsIFtcImZvcmNlYmFuXCJdLCAxNTAwKVxyXG4gICAgfVxyXG4gICAgYXN5bmMgcnVuKGJvdDogQm90LCBtZXNzYWdlOiBNZXNzYWdlLCBhcmdzOiBzdHJpbmdbXSkge1xyXG4gICAgICAgIGlmICghbWVzc2FnZS5tZW1iZXIucGVybWlzc2lvbnMuaGFzKFwiQURNSU5JU1RSQVRPUlwiKSkgcmV0dXJuIG1lc3NhZ2UuY2hhbm5lbC5zZW5kKGJvdC5sYW5ndWFnZS5nbG9iYWwubm9QZXJtcyk7XHJcbiAgICAgICAgY29uc3QgbGFuZyA9IGJvdC5sYW5ndWFnZS5jb21tYW5kcy5mb3JjZWJhbjtcclxuICAgICAgICBjb25zdCB1c2VycyA9IGF3YWl0IE1hbGljaW9zby5maW5kT25lKCk7XHJcbiAgICAgICAgaWYgKCF1c2VycykgcmV0dXJuIG1lc3NhZ2UuY2hhbm5lbC5zZW5kKGxhbmcubm9Vc2VycylcclxuICAgICAgICBjb25zdCBtc2cgPSBhd2FpdCBtZXNzYWdlLmNoYW5uZWwuc2VuZChsYW5nLmJhbmVhZG8pO1xyXG4gICAgICAgIGxldCBub0JhbnM6IG51bWJlciA9IDA7XHJcbiAgICAgICAgbGV0IGJhbm5lZHM6IG51bWJlciA9IDA7XHJcbiAgICAgICAgZm9yIChjb25zdCB1c2Vyc0lkIG9mIHVzZXJzLnVzdWFyaW9zKSB7XHJcbiAgICAgICAgICAgIGF3YWl0IFV0aWwuZGVsYXlGb3IoNTAwMCk7IC8vIFRoaXMgd2lsbCBhbGxvdyB0aGUgQVBJIG5vdCB0byBiZSBhYnVzZWQgYnkgd2FpdGluZyA1IHNlY29uZHNcclxuICAgICAgICAgICAgY29uc3QgdXNlclRvQmFuID0gYm90LmNsaWVudC51c2Vycy5jYWNoZS5nZXQoYCR7QmlnSW50KHVzZXJzSWQpfWApIHx8IGF3YWl0IGJvdC5jbGllbnQudXNlcnMuZmV0Y2goYCR7QmlnSW50KHVzZXJzSWQpfWApO1xyXG4gICAgICAgICAgICBpZiAodXNlclRvQmFuKSB7XHJcbiAgICAgICAgICAgICAgICBhd2FpdCBtZXNzYWdlLmd1aWxkLm1lbWJlcnMuYmFuKHVzZXJUb0JhbiwgeyBkYXlzOiA3LCByZWFzb246IGxhbmcucmVhc29uIH0pLmNhdGNoKCgpID0+IHsgbm9CYW5zKysgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYmFubmVkcysrO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgY29uc3QgZW1iZWQgPSBuZXcgTWVzc2FnZUVtYmVkKClcclxuICAgICAgICAgICAgLnNldEF1dGhvcihtZXNzYWdlLm1lbWJlci5kaXNwbGF5TmFtZSwgbWVzc2FnZS5hdXRob3IuYXZhdGFyVVJMKHsgZHluYW1pYzogdHJ1ZSB9KSlcclxuICAgICAgICAgICAgLnNldERlc2NyaXB0aW9uKGxhbmcuZGVzYylcclxuICAgICAgICAgICAgLmFkZEZpZWxkcyh7XHJcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogbGFuZy5yZWFkeSxcclxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogYCR7YmFubmVkcyAtIG5vQmFuc31gLFxyXG4gICAgICAgICAgICAgICAgICAgIGlubGluZTogdHJ1ZVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBsYW5nLmVycm9yZXMsXHJcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGAke25vQmFuc31gLFxyXG4gICAgICAgICAgICAgICAgICAgIGlubGluZTogdHJ1ZVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgYXdhaXQgbXNnLmVkaXQoeyBlbWJlZHM6IFtlbWJlZF0gfSk7XHJcbiAgICB9XHJcbn0iXX0=