"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const database_1 = require("../../database/");
const lib_1 = require("../../lib");
class DeleteUsersCommand extends lib_1.CommandBase {
    constructor() {
        // Name, Category, alias, cooldown
        super('delete-users', 'Admin', ["delete-user", "borrar-usuarios", "unwhitelist"], 15);
    }
    async run(bot, message, args) {
        const lang = bot.language.commands.deleteUsers;
        if (message.author.id !== message.guild.ownerId)
            return message.channel.send(bot.language.global.onlyOwner);
        const search = await database_1.Registrador.findById(message.guild.id);
        if (!search)
            return message.channel.send(bot.language.global.noSearch);
        if (!args[0])
            return message.channel.send(lang.ingresarId);
        const userRemove = await bot.client.users.fetch(`${BigInt(args[0])}`).catch(() => { });
        if (!userRemove)
            return message.channel.send(lang.idValida);
        const usersArr = search.users;
        if (usersArr.length <= 0)
            return message.channel.send(lang.noUsers);
        if (!usersArr.includes(userRemove.id))
            return message.channel.send(lang.noEncontrado);
        else
            usersArr.splice(usersArr.indexOf(userRemove.id), 1);
        await database_1.Registrador.findByIdAndUpdate(message.guild.id, { users: usersArr });
        message.channel.send(userRemove.tag + lang.sacado);
    }
}
exports.default = DeleteUsersCommand;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVsZXRlLXVzZXJzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NvbW1hbmRzL2FkbWluL2RlbGV0ZS11c2Vycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUVBLDhDQUE0QztBQUM1QyxtQ0FBd0M7QUFDeEMsTUFBcUIsa0JBQW1CLFNBQVEsaUJBQVc7SUFDdkQ7UUFDSSxrQ0FBa0M7UUFDbEMsS0FBSyxDQUFDLGNBQWMsRUFBRSxPQUFPLEVBQUUsQ0FBQyxhQUFhLEVBQUUsaUJBQWlCLEVBQUUsYUFBYSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUE7SUFDekYsQ0FBQztJQUNELEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBUSxFQUFFLE9BQWdCLEVBQUUsSUFBYztRQUNoRCxNQUFNLElBQUksR0FBRyxHQUFHLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUM7UUFDL0MsSUFBSSxPQUFPLENBQUMsTUFBTSxDQUFDLEVBQUUsS0FBSyxPQUFPLENBQUMsS0FBSyxDQUFDLE9BQU87WUFBRSxPQUFPLE9BQU8sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQzVHLE1BQU0sTUFBTSxHQUFHLE1BQU0sc0JBQVcsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUM1RCxJQUFJLENBQUMsTUFBTTtZQUFFLE9BQU8sT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDdkUsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7WUFBRSxPQUFPLE9BQU8sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUMzRCxNQUFNLFVBQVUsR0FBZ0IsTUFBTSxHQUFHLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsR0FBRSxDQUFDLENBQUMsQ0FBQztRQUNuRyxJQUFJLENBQUMsVUFBVTtZQUFFLE9BQU8sT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQzVELE1BQU0sUUFBUSxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUM7UUFDOUIsSUFBSSxRQUFRLENBQUMsTUFBTSxJQUFJLENBQUM7WUFBRSxPQUFPLE9BQU8sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNwRSxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDO1lBQUUsT0FBTyxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7O1lBQ2pGLFFBQVEsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDekQsTUFBTSxzQkFBVyxDQUFDLGlCQUFpQixDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRSxFQUFFLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRSxDQUFDLENBQUM7UUFDM0UsT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7SUFFdkQsQ0FBQztDQUNKO0FBckJELHFDQXFCQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE1lc3NhZ2UsIFVzZXIgfSBmcm9tIFwiZGlzY29yZC5qc1wiO1xyXG5pbXBvcnQgQm90IGZyb20gXCIuLi8uLi9ib3RcIjtcclxuaW1wb3J0IHtSZWdpc3RyYWRvcn0gZnJvbSBcIi4uLy4uL2RhdGFiYXNlL1wiO1xyXG5pbXBvcnQgeyBDb21tYW5kQmFzZSB9IGZyb20gJy4uLy4uL2xpYic7XHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIERlbGV0ZVVzZXJzQ29tbWFuZCBleHRlbmRzIENvbW1hbmRCYXNlIHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIC8vIE5hbWUsIENhdGVnb3J5LCBhbGlhcywgY29vbGRvd25cclxuICAgICAgICBzdXBlcignZGVsZXRlLXVzZXJzJywgJ0FkbWluJywgW1wiZGVsZXRlLXVzZXJcIiwgXCJib3JyYXItdXN1YXJpb3NcIiwgXCJ1bndoaXRlbGlzdFwiXSwgMTUpXHJcbiAgICB9XHJcbiAgICBhc3luYyBydW4oYm90OiBCb3QsIG1lc3NhZ2U6IE1lc3NhZ2UsIGFyZ3M6IHN0cmluZ1tdKSB7XHJcbiAgICAgICAgY29uc3QgbGFuZyA9IGJvdC5sYW5ndWFnZS5jb21tYW5kcy5kZWxldGVVc2VycztcclxuICAgICAgICBpZiAobWVzc2FnZS5hdXRob3IuaWQgIT09IG1lc3NhZ2UuZ3VpbGQub3duZXJJZCkgcmV0dXJuIG1lc3NhZ2UuY2hhbm5lbC5zZW5kKGJvdC5sYW5ndWFnZS5nbG9iYWwub25seU93bmVyKTtcclxuICAgICAgICBjb25zdCBzZWFyY2ggPSBhd2FpdCBSZWdpc3RyYWRvci5maW5kQnlJZChtZXNzYWdlLmd1aWxkLmlkKTtcclxuICAgICAgICBpZiAoIXNlYXJjaCkgcmV0dXJuIG1lc3NhZ2UuY2hhbm5lbC5zZW5kKGJvdC5sYW5ndWFnZS5nbG9iYWwubm9TZWFyY2gpO1xyXG4gICAgICAgIGlmICghYXJnc1swXSkgcmV0dXJuIG1lc3NhZ2UuY2hhbm5lbC5zZW5kKGxhbmcuaW5ncmVzYXJJZCk7XHJcbiAgICAgICAgY29uc3QgdXNlclJlbW92ZTogVXNlciB8IHZvaWQgPSBhd2FpdCBib3QuY2xpZW50LnVzZXJzLmZldGNoKGAke0JpZ0ludChhcmdzWzBdKX1gKS5jYXRjaCgoKSA9PiB7fSk7XHJcbiAgICAgICAgaWYgKCF1c2VyUmVtb3ZlKSByZXR1cm4gbWVzc2FnZS5jaGFubmVsLnNlbmQobGFuZy5pZFZhbGlkYSk7XHJcbiAgICAgICAgY29uc3QgdXNlcnNBcnIgPSBzZWFyY2gudXNlcnM7XHJcbiAgICAgICAgaWYgKHVzZXJzQXJyLmxlbmd0aCA8PSAwKSByZXR1cm4gbWVzc2FnZS5jaGFubmVsLnNlbmQobGFuZy5ub1VzZXJzKTtcclxuICAgICAgICBpZiAoIXVzZXJzQXJyLmluY2x1ZGVzKHVzZXJSZW1vdmUuaWQpKSByZXR1cm4gbWVzc2FnZS5jaGFubmVsLnNlbmQobGFuZy5ub0VuY29udHJhZG8pO1xyXG4gICAgICAgIGVsc2UgdXNlcnNBcnIuc3BsaWNlKHVzZXJzQXJyLmluZGV4T2YodXNlclJlbW92ZS5pZCksIDEpO1xyXG4gICAgICAgIGF3YWl0IFJlZ2lzdHJhZG9yLmZpbmRCeUlkQW5kVXBkYXRlKG1lc3NhZ2UuZ3VpbGQuaWQsIHsgdXNlcnM6IHVzZXJzQXJyIH0pO1xyXG4gICAgICAgIG1lc3NhZ2UuY2hhbm5lbC5zZW5kKHVzZXJSZW1vdmUudGFnICsgbGFuZy5zYWNhZG8pO1xyXG5cclxuICAgIH1cclxufSJdfQ==