"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const database_1 = require("../../database/");
const lib_1 = require("../../lib");
class PTCCommand extends lib_1.CommandBase {
    constructor() {
        // Name, Category, alias, cooldown
        super('protected-channels', 'Admin', ["canales-protegidos", 'ptc'], 5);
    }
    async run(bot, message, args) {
        const lang = bot.language.commands.protected;
        if (message.author.id != message.guild.ownerId)
            return message.channel.send(lang.noPerms);
        if (!args[0])
            return message.channel.send(lang.removeAdd);
        const channel = message.mentions.channels.first() || message.guild.channels.cache.get(`${BigInt(args[1])}`);
        const searchChannel = await database_1.Channel.findById(message.guild.id);
        if (["remove", "remover"].includes(args[0].toLowerCase())) {
            if (!searchChannel)
                return message.reply(lang.noCanales);
            const indice = searchChannel.channel.indexOf(args[1]);
            if (indice === -1)
                return message.channel.send(lang.noFound);
            searchChannel.channel.splice(indice, 1);
            await searchChannel.save();
            message.channel.send(lang.removeExitoso);
        }
        else if (["add", "aÃ±adir"].includes(args[0].toLowerCase())) {
            if (!channel)
                return message.channel.send(lang.noCanal);
            if (channel.guild.id !== message.guild.id)
                return message.channel.send(lang.noCanal);
            if (!searchChannel) {
                const newChannel = new database_1.Channel({
                    _id: message.guild.id,
                    channel: channel.id
                });
                await newChannel.save();
            }
            else {
                if (searchChannel.channel.length >= 3)
                    return message.channel.send(lang.no3Mas);
                if (searchChannel.channel.includes(channel.id))
                    return message.channel.send(lang.yaEsta);
                await searchChannel.updateOne({ $push: { channel: channel.id } });
            }
            message.channel.send(channel.toString() + lang.establecido);
        }
        else if (["view", "ver"].includes(args[0].toLowerCase())) {
            if (!searchChannel)
                return message.channel.send('No existen los canales');
            message.channel.send(searchChannel.channel.map(v => "<#" + v + ">").join(" "));
        }
        else
            message.channel.send(lang.removeAdd);
    }
}
exports.default = PTCCommand;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvdGVjdGVkLWNoYW5uZWxzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NvbW1hbmRzL2FkbWluL3Byb3RlY3RlZC1jaGFubmVscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUVBLDhDQUF3QztBQUN4QyxtQ0FBd0M7QUFDeEMsTUFBcUIsVUFBVyxTQUFRLGlCQUFXO0lBQy9DO1FBQ0ksa0NBQWtDO1FBQ2xDLEtBQUssQ0FBQyxvQkFBb0IsRUFBRSxPQUFPLEVBQUUsQ0FBQyxvQkFBb0IsRUFBRSxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQTtJQUMxRSxDQUFDO0lBQ0QsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFRLEVBQUUsT0FBZ0IsRUFBRSxJQUFjO1FBQ2hELE1BQU0sSUFBSSxHQUFHLEdBQUcsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQztRQUM3QyxJQUFJLE9BQU8sQ0FBQyxNQUFNLENBQUMsRUFBRSxJQUFJLE9BQU8sQ0FBQyxLQUFLLENBQUMsT0FBTztZQUFFLE9BQU8sT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQzFGLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1lBQUUsT0FBTyxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDMUQsTUFBTSxPQUFPLEdBQStCLE9BQU8sQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBZ0MsSUFBSSxPQUFPLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQStCLENBQUM7UUFDcE0sTUFBTSxhQUFhLEdBQUcsTUFBTSxrQkFBTyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFD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QyxDQUFDO1NBQzlFOztZQUFNLE9BQU8sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUNoRCxDQUFDO0NBQ0o7QUF0Q0QsNkJBc0NDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEJvdCBmcm9tICcuLi8uLi9ib3QnO1xyXG5pbXBvcnQgeyBHdWlsZENoYW5uZWwsIE1lc3NhZ2UsIFRleHRDaGFubmVsIH0gZnJvbSAnZGlzY29yZC5qcyc7XHJcbmltcG9ydCB7Q2hhbm5lbH0gZnJvbSAnLi4vLi4vZGF0YWJhc2UvJztcclxuaW1wb3J0IHsgQ29tbWFuZEJhc2UgfSBmcm9tICcuLi8uLi9saWInO1xyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQVENDb21tYW5kIGV4dGVuZHMgQ29tbWFuZEJhc2Uge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgLy8gTmFtZSwgQ2F0ZWdvcnksIGFsaWFzLCBjb29sZG93blxyXG4gICAgICAgIHN1cGVyKCdwcm90ZWN0ZWQtY2hhbm5lbHMnLCAnQWRtaW4nLCBbXCJjYW5hbGVzLXByb3RlZ2lkb3NcIiwgJ3B0YyddLCA1KVxyXG4gICAgfVxyXG4gICAgYXN5bmMgcnVuKGJvdDogQm90LCBtZXNzYWdlOiBNZXNzYWdlLCBhcmdzOiBzdHJpbmdbXSkge1xyXG4gICAgICAgIGNvbnN0IGxhbmcgPSBib3QubGFuZ3VhZ2UuY29tbWFuZHMucHJvdGVjdGVkO1xyXG4gICAgICAgIGlmIChtZXNzYWdlLmF1dGhvci5pZCAhPSBtZXNzYWdlLmd1aWxkLm93bmVySWQpIHJldHVybiBtZXNzYWdlLmNoYW5uZWwuc2VuZChsYW5nLm5vUGVybXMpO1xyXG4gICAgICAgIGlmICghYXJnc1swXSkgcmV0dXJuIG1lc3NhZ2UuY2hhbm5lbC5zZW5kKGxhbmcucmVtb3ZlQWRkKTtcclxuICAgICAgICBjb25zdCBjaGFubmVsOiBHdWlsZENoYW5uZWwgfCBUZXh0Q2hhbm5lbCA9IG1lc3NhZ2UubWVudGlvbnMuY2hhbm5lbHMuZmlyc3QoKSBhcyBUZXh0Q2hhbm5lbCB8IEd1aWxkQ2hhbm5lbCB8fCBtZXNzYWdlLmd1aWxkLmNoYW5uZWxzLmNhY2hlLmdldChgJHtCaWdJbnQoYXJnc1sxXSl9YCkgYXMgVGV4dENoYW5uZWwgfCBHdWlsZENoYW5uZWw7XHJcbiAgICAgICAgY29uc3Qgc2VhcmNoQ2hhbm5lbCA9IGF3YWl0IENoYW5uZWwuZmluZEJ5SWQobWVzc2FnZS5ndWlsZC5pZCk7XHJcbiAgICAgICAgaWYgKFtcInJlbW92ZVwiLCBcInJlbW92ZXJcIl0uaW5jbHVkZXMoYXJnc1swXS50b0xvd2VyQ2FzZSgpKSkge1xyXG4gICAgICAgICAgICBpZiAoIXNlYXJjaENoYW5uZWwpIHJldHVybiBtZXNzYWdlLnJlcGx5KGxhbmcubm9DYW5hbGVzKTtcclxuICAgICAgICAgICAgY29uc3QgaW5kaWNlID0gc2VhcmNoQ2hhbm5lbC5jaGFubmVsLmluZGV4T2YoYXJnc1sxXSk7XHJcbiAgICAgICAgICAgIGlmIChpbmRpY2UgPT09IC0xKSByZXR1cm4gbWVzc2FnZS5jaGFubmVsLnNlbmQobGFuZy5ub0ZvdW5kKTtcclxuICAgICAgICAgICAgc2VhcmNoQ2hhbm5lbC5jaGFubmVsLnNwbGljZShpbmRpY2UsIDEpO1xyXG4gICAgICAgICAgICBhd2FpdCBzZWFyY2hDaGFubmVsLnNhdmUoKTtcclxuICAgICAgICAgICAgbWVzc2FnZS5jaGFubmVsLnNlbmQobGFuZy5yZW1vdmVFeGl0b3NvKTtcclxuICAgICAgICB9IGVsc2UgaWYgKFtcImFkZFwiLCBcImHDsWFkaXJcIl0uaW5jbHVkZXMoYXJnc1swXS50b0xvd2VyQ2FzZSgpKSkge1xyXG4gICAgICAgICAgICBpZiAoIWNoYW5uZWwpIHJldHVybiBtZXNzYWdlLmNoYW5uZWwuc2VuZChsYW5nLm5vQ2FuYWwpO1xyXG4gICAgICAgICAgICBpZiAoY2hhbm5lbC5ndWlsZC5pZCAhPT0gbWVzc2FnZS5ndWlsZC5pZCkgcmV0dXJuIG1lc3NhZ2UuY2hhbm5lbC5zZW5kKGxhbmcubm9DYW5hbCk7XHJcbiAgICAgICAgICAgIGlmICghc2VhcmNoQ2hhbm5lbCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbmV3Q2hhbm5lbCA9IG5ldyBDaGFubmVsKHtcclxuICAgICAgICAgICAgICAgICAgICBfaWQ6IG1lc3NhZ2UuZ3VpbGQuaWQsXHJcbiAgICAgICAgICAgICAgICAgICAgY2hhbm5lbDogY2hhbm5lbC5pZFxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICBhd2FpdCBuZXdDaGFubmVsLnNhdmUoKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGlmIChzZWFyY2hDaGFubmVsLmNoYW5uZWwubGVuZ3RoID49IDMpIHJldHVybiBtZXNzYWdlLmNoYW5uZWwuc2VuZChsYW5nLm5vM01hcyk7XHJcbiAgICAgICAgICAgICAgICBpZiAoc2VhcmNoQ2hhbm5lbC5jaGFubmVsLmluY2x1ZGVzKGNoYW5uZWwuaWQpKSByZXR1cm4gbWVzc2FnZS5jaGFubmVsLnNlbmQobGFuZy55YUVzdGEpO1xyXG4gICAgICAgICAgICAgICAgYXdhaXQgc2VhcmNoQ2hhbm5lbC51cGRhdGVPbmUoeyAkcHVzaDogeyBjaGFubmVsOiBjaGFubmVsLmlkIH0gfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgbWVzc2FnZS5jaGFubmVsLnNlbmQoY2hhbm5lbC50b1N0cmluZygpICsgbGFuZy5lc3RhYmxlY2lkbyk7XHJcbiAgICAgICAgfSBlbHNlIGlmIChbXCJ2aWV3XCIsIFwidmVyXCJdLmluY2x1ZGVzKGFyZ3NbMF0udG9Mb3dlckNhc2UoKSkpIHtcclxuICAgICAgICAgICAgaWYgKCFzZWFyY2hDaGFubmVsKSByZXR1cm4gbWVzc2FnZS5jaGFubmVsLnNlbmQoJ05vIGV4aXN0ZW4gbG9zIGNhbmFsZXMnKTtcclxuICAgICAgICAgICAgbWVzc2FnZS5jaGFubmVsLnNlbmQoc2VhcmNoQ2hhbm5lbC5jaGFubmVsLm1hcCh2ID0+IFwiPCNcIit2K1wiPlwiKS5qb2luKFwiIFwiKSk7XHJcbiAgICAgICAgfSBlbHNlIG1lc3NhZ2UuY2hhbm5lbC5zZW5kKGxhbmcucmVtb3ZlQWRkKTtcclxuICAgIH1cclxufSJdfQ==