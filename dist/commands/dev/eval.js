"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const util_1 = __importDefault(require("util"));
const lib_1 = require("../../lib");
const discord_js_1 = require("discord.js");
class EvalCommand extends lib_1.CommandBase {
    constructor() {
        super('eval', 'dev', ['e'], 1);
    }
    async run(bot, message, args) {
        const tiempo1 = Date.now();
        const edit = new discord_js_1.MessageEmbed()
            .setDescription(":stopwatch: Evaluando...")
            .setColor("#7289DA");
        const msg = await message.channel.send({ embeds: [edit] });
        try {
            const code = args.join(" ");
            let evalued = await eval(code);
            const type = typeof evalued || "Tipo no encontrado.";
            if (typeof evalued !== 'string')
                evalued = util_1.default.inspect(evalued, { depth: 0, maxStringLength: 2000 });
            const txt = "" + evalued;
            const embed = new discord_js_1.MessageEmbed()
                .addField(":inbox_tray: Entrada", `\`\`\`js\n${code}\n\`\`\``)
                .addField(":outbox_tray: Salida", `\`${txt.substring(0, 1023)}\``)
                .addField(":file_folder: Tipo", `\`\`\`js\n${type}\n\`\`\``, true)
                .addField(":stopwatch: Tiempo", `\`\`\`fix\n${Date.now() - tiempo1}ms\n\`\`\``, true)
                .setColor("#7289DA");
            msg.edit({ embeds: [embed] });
        }
        catch (err) {
            const embed = new discord_js_1.MessageEmbed()
                .setAuthor("Error en el eval", bot.client.user.displayAvatarURL({ dynamic: true }))
                .addField(":inbox_tray: Entrada", `\`\`\`js\n${args.join(" ")}\n\`\`\``)
                .addField(":outbox_tray: Salida", `\`\`\`js\n${err}\n\`\`\``)
                .addField(":file_folder: Tipo", `\`\`\`js\nError\n\`\`\``)
                .setColor("RED");
            msg.edit({ embeds: [embed] });
        }
    }
}
exports.default = EvalCommand;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXZhbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21tYW5kcy9kZXYvZXZhbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUNBLGdEQUF3QjtBQUN4QixtQ0FBd0M7QUFDeEMsMkNBQW1EO0FBQ25ELE1BQXFCLFdBQVksU0FBUSxpQkFBVztJQUNoRDtRQUNJLEtBQUssQ0FBQyxNQUFNLEVBQUUsS0FBSyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUE7SUFDbEMsQ0FBQztJQUNELEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBUSxFQUFFLE9BQWdCLEVBQUUsSUFBbUI7UUFFckQsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFBO1FBQzFCLE1BQU0sSUFBSSxHQUFHLElBQUkseUJBQVksRUFBRTthQUMxQixjQUFjLENBQUMsMEJBQTBCLENBQUM7YUFDMUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFBO1FBQ3hCLE1BQU0sR0FBRyxHQUFHLE1BQU0sT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBQyxDQUFDLENBQUE7UUFDeEQsSUFBSTtZQUNBLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDNUIsSUFBSSxPQUFPLEdBQUcsTUFBTSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDL0IsTUFBTSxJQUFJLEdBQUcsT0FBTyxPQUFPLElBQUkscUJBQXFCLENBQUE7WUFDcEQsSUFBSSxPQUFPLE9BQU8sS0FBSyxRQUFRO2dCQUFFLE9BQU8sR0FBRyxjQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsZUFBZSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7WUFDdEcsTUFBTSxHQUFHLEdBQUcsRUFBRSxHQUFHLE9BQU8sQ0FBQztZQUN6QixNQUFNLEtBQUssR0FBRyxJQUFJLHlCQUFZLEVBQUU7aUJBQzNCLFFBQVEsQ0FBQyxzQkFBc0IsRUFBRSxhQUFhLElBQUksVUFBVSxDQUFDO2lCQUM3RCxRQUFRLENBQUMsc0JBQXNCLEVBQUUsS0FBSyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDO2lCQUNqRSxRQUFRLENBQUMsb0JBQW9CLEVBQUUsYUFBYSxJQUFJLFVBQVUsRUFBRSxJQUFJLENBQUM7aUJBQ2pFLFFBQVEsQ0FBQyxvQkFBb0IsRUFBRSxjQUFjLElBQUksQ0FBQyxHQUFHLEVBQUUsR0FBRyxPQUFPLFlBQVksRUFBRSxJQUFJLENBQUM7aUJBQ3BGLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQztZQUNyQixHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUMsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLEVBQUMsQ0FBQyxDQUFDO1NBQ25DO1FBQUMsT0FBTyxHQUFHLEVBQUU7WUFDVixNQUFNLEtBQUssR0FBRyxJQUFJLHlCQUFZLEVBQUU7aUJBQzNCLFNBQVMsQ0FBQyxrQkFBa0IsRUFBRSxHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO2lCQUNsRixRQUFRLENBQUMsc0JBQXNCLEVBQUUsYUFBYSxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUM7aUJBQ3ZFLFFBQVEsQ0FBQyxzQkFBc0IsRUFBRSxhQUFhLEdBQUcsVUFBVSxDQUFDO2lCQUM1RCxRQUFRLENBQUMsb0JBQW9CLEVBQUUseUJBQXlCLENBQUM7aUJBQ3pELFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQTtZQUNwQixHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUMsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLEVBQUMsQ0FBQyxDQUFDO1NBQy9CO0lBQ0wsQ0FBQztDQUNKO0FBbENELDhCQWtDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBCb3QgZnJvbSAnLi4vLi4vYm90JztcclxuaW1wb3J0IHV0aWwgZnJvbSAndXRpbCc7XHJcbmltcG9ydCB7IENvbW1hbmRCYXNlIH0gZnJvbSAnLi4vLi4vbGliJztcclxuaW1wb3J0IHsgTWVzc2FnZSwgTWVzc2FnZUVtYmVkIH0gZnJvbSBcImRpc2NvcmQuanNcIjtcclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRXZhbENvbW1hbmQgZXh0ZW5kcyBDb21tYW5kQmFzZSB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlcignZXZhbCcsICdkZXYnLCBbJ2UnXSwgMSlcclxuICAgIH1cclxuICAgIGFzeW5jIHJ1bihib3Q6IEJvdCwgbWVzc2FnZTogTWVzc2FnZSwgYXJnczogQXJyYXk8c3RyaW5nPikge1xyXG4gICAgICAgIFxyXG4gICAgICAgIGNvbnN0IHRpZW1wbzEgPSBEYXRlLm5vdygpXHJcbiAgICAgICAgY29uc3QgZWRpdCA9IG5ldyBNZXNzYWdlRW1iZWQoKVxyXG4gICAgICAgICAgICAuc2V0RGVzY3JpcHRpb24oXCI6c3RvcHdhdGNoOiBFdmFsdWFuZG8uLi5cIilcclxuICAgICAgICAgICAgLnNldENvbG9yKFwiIzcyODlEQVwiKVxyXG4gICAgICAgIGNvbnN0IG1zZyA9IGF3YWl0IG1lc3NhZ2UuY2hhbm5lbC5zZW5kKHtlbWJlZHM6IFtlZGl0XX0pXHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgY29uc3QgY29kZSA9IGFyZ3Muam9pbihcIiBcIik7XHJcbiAgICAgICAgICAgIGxldCBldmFsdWVkID0gYXdhaXQgZXZhbChjb2RlKTtcclxuICAgICAgICAgICAgY29uc3QgdHlwZSA9IHR5cGVvZiBldmFsdWVkIHx8IFwiVGlwbyBubyBlbmNvbnRyYWRvLlwiXHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZXZhbHVlZCAhPT0gJ3N0cmluZycpIGV2YWx1ZWQgPSB1dGlsLmluc3BlY3QoZXZhbHVlZCwgeyBkZXB0aDogMCwgbWF4U3RyaW5nTGVuZ3RoOiAyMDAwIH0pO1xyXG4gICAgICAgICAgICBjb25zdCB0eHQgPSBcIlwiICsgZXZhbHVlZDtcclxuICAgICAgICAgICAgY29uc3QgZW1iZWQgPSBuZXcgTWVzc2FnZUVtYmVkKClcclxuICAgICAgICAgICAgICAgIC5hZGRGaWVsZChcIjppbmJveF90cmF5OiBFbnRyYWRhXCIsIGBcXGBcXGBcXGBqc1xcbiR7Y29kZX1cXG5cXGBcXGBcXGBgKVxyXG4gICAgICAgICAgICAgICAgLmFkZEZpZWxkKFwiOm91dGJveF90cmF5OiBTYWxpZGFcIiwgYFxcYCR7dHh0LnN1YnN0cmluZygwLCAxMDIzKX1cXGBgKVxyXG4gICAgICAgICAgICAgICAgLmFkZEZpZWxkKFwiOmZpbGVfZm9sZGVyOiBUaXBvXCIsIGBcXGBcXGBcXGBqc1xcbiR7dHlwZX1cXG5cXGBcXGBcXGBgLCB0cnVlKVxyXG4gICAgICAgICAgICAgICAgLmFkZEZpZWxkKFwiOnN0b3B3YXRjaDogVGllbXBvXCIsIGBcXGBcXGBcXGBmaXhcXG4ke0RhdGUubm93KCkgLSB0aWVtcG8xfW1zXFxuXFxgXFxgXFxgYCwgdHJ1ZSlcclxuICAgICAgICAgICAgICAgIC5zZXRDb2xvcihcIiM3Mjg5REFcIik7XHJcbiAgICAgICAgICAgICAgICBtc2cuZWRpdCh7ZW1iZWRzOiBbZW1iZWRdfSk7XHJcbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGVtYmVkID0gbmV3IE1lc3NhZ2VFbWJlZCgpXHJcbiAgICAgICAgICAgICAgICAuc2V0QXV0aG9yKFwiRXJyb3IgZW4gZWwgZXZhbFwiLCBib3QuY2xpZW50LnVzZXIuZGlzcGxheUF2YXRhclVSTCh7IGR5bmFtaWM6IHRydWUgfSkpXHJcbiAgICAgICAgICAgICAgICAuYWRkRmllbGQoXCI6aW5ib3hfdHJheTogRW50cmFkYVwiLCBgXFxgXFxgXFxganNcXG4ke2FyZ3Muam9pbihcIiBcIil9XFxuXFxgXFxgXFxgYClcclxuICAgICAgICAgICAgICAgIC5hZGRGaWVsZChcIjpvdXRib3hfdHJheTogU2FsaWRhXCIsIGBcXGBcXGBcXGBqc1xcbiR7ZXJyfVxcblxcYFxcYFxcYGApXHJcbiAgICAgICAgICAgICAgICAuYWRkRmllbGQoXCI6ZmlsZV9mb2xkZXI6IFRpcG9cIiwgYFxcYFxcYFxcYGpzXFxuRXJyb3JcXG5cXGBcXGBcXGBgKVxyXG4gICAgICAgICAgICAgICAgLnNldENvbG9yKFwiUkVEXCIpXHJcbiAgICAgICAgICAgIG1zZy5lZGl0KHtlbWJlZHM6IFtlbWJlZF19KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iXX0=