"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// If a user creates many roles at the same time, he will be self-banned.
const database_1 = require("../../database/");
const lib_1 = require("../../lib");
const ratelimit = new Map();
class RoleCreateEvent extends lib_1.BaseEvent {
    constructor() {
        super('roleCreate');
    }
    async run(bot, role) {
        if (!role.guild.me.permissions.has(["BAN_MEMBERS", "MANAGE_ROLES", "VIEW_AUDIT_LOG"]))
            return;
        const search = await database_1.Registrador.findById(role.guild.id);
        if (!search || !search.roles)
            return;
        const fetchedLogs = await role.guild.fetchAuditLogs({
            limit: 1,
            type: 'CHANNEL_DELETE',
        });
        if (fetchedLogs) {
            const { executor } = fetchedLogs.entries.first();
            if (executor) {
                if (ratelimit.has(executor.id)) {
                    if (ratelimit.get(executor.id) >= 5) {
                        await role.guild.members.ban(executor);
                    }
                    else {
                        ratelimit.set(executor.id, ratelimit.get(executor.id) + 1);
                    }
                }
                else {
                    ratelimit.set(executor.id, 1);
                }
            }
            setTimeout(() => ratelimit.delete(executor.id), 10 * 1000); // 10 seconds
        }
    }
}
exports.default = RoleCreateEvent;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm9sZUNyZWF0ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9ldmVudHMvcm9sZXMvcm9sZUNyZWF0ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHlFQUF5RTtBQUN6RSw4Q0FBOEM7QUFDOUMsbUNBQXNDO0FBR3RDLE1BQU0sU0FBUyxHQUFHLElBQUksR0FBRyxFQUFFLENBQUM7QUFDNUIsTUFBcUIsZUFBZ0IsU0FBUSxlQUFTO0lBQ2xEO1FBQ0ksS0FBSyxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQ3hCLENBQUM7SUFDRCxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQVEsRUFBRSxJQUFVO1FBQzFCLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUMsYUFBYSxFQUFFLGNBQWMsRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO1lBQUUsT0FBTztRQUM5RixNQUFNLE1BQU0sR0FBRyxNQUFNLHNCQUFXLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDekQsSUFBSSxDQUFDLE1BQU0sSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLO1lBQUUsT0FBTztRQUVyQyxNQUFNLFdBQVcsR0FBRyxNQUFNLElBQUksQ0FBQyxLQUFLLENBQUMsY0FBYyxDQUFDO1lBQ2hELEtBQUssRUFBRSxDQUFDO1lBQ1IsSUFBSSxFQUFFLGdCQUFnQjtTQUN6QixDQUFDLENBQUM7UUFDSCxJQUFJLFdBQVcsRUFBRTtZQUNiLE1BQU0sRUFBQyxRQUFRLEVBQUMsR0FBRyxXQUFXLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxDQUFDO1lBQy9DLElBQUksUUFBUSxFQUFFO2dCQUNWLElBQUcsU0FBUyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLEVBQUU7b0JBQzNCLElBQUksU0FBUyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFO3dCQUNqQyxNQUFNLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQztxQkFDMUM7eUJBQU07d0JBQ0gsU0FBUyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsRUFBRSxFQUFFLFNBQVMsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO3FCQUM5RDtpQkFDSjtxQkFBTTtvQkFDSCxTQUFTLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7aUJBQ2pDO2FBQ0o7WUFFRCxVQUFVLENBQUMsR0FBRyxFQUFFLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsYUFBYTtTQUM1RTtJQUNMLENBQUM7Q0FDSjtBQTlCRCxrQ0E4QkMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBJZiBhIHVzZXIgY3JlYXRlcyBtYW55IHJvbGVzIGF0IHRoZSBzYW1lIHRpbWUsIGhlIHdpbGwgYmUgc2VsZi1iYW5uZWQuXHJcbmltcG9ydCB7IFJlZ2lzdHJhZG9yIH0gZnJvbSBcIi4uLy4uL2RhdGFiYXNlL1wiO1xyXG5pbXBvcnQgeyBCYXNlRXZlbnQgfSBmcm9tICcuLi8uLi9saWInO1xyXG5pbXBvcnQgQm90IGZyb20gXCIuLi8uLi9ib3RcIjtcclxuaW1wb3J0IHsgUm9sZSB9IGZyb20gXCJkaXNjb3JkLmpzXCI7XHJcbmNvbnN0IHJhdGVsaW1pdCA9IG5ldyBNYXAoKTtcclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUm9sZUNyZWF0ZUV2ZW50IGV4dGVuZHMgQmFzZUV2ZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKCdyb2xlQ3JlYXRlJyk7XHJcbiAgICB9XHJcbiAgICBhc3luYyBydW4oYm90OiBCb3QsIHJvbGU6IFJvbGUpIHtcclxuICAgICAgICBpZiAoIXJvbGUuZ3VpbGQubWUucGVybWlzc2lvbnMuaGFzKFtcIkJBTl9NRU1CRVJTXCIsIFwiTUFOQUdFX1JPTEVTXCIsIFwiVklFV19BVURJVF9MT0dcIl0pKSByZXR1cm47XHJcbiAgICAgICAgY29uc3Qgc2VhcmNoID0gYXdhaXQgUmVnaXN0cmFkb3IuZmluZEJ5SWQocm9sZS5ndWlsZC5pZCk7XHJcbiAgICAgICAgaWYgKCFzZWFyY2ggfHwgIXNlYXJjaC5yb2xlcykgcmV0dXJuO1xyXG5cclxuICAgICAgICBjb25zdCBmZXRjaGVkTG9ncyA9IGF3YWl0IHJvbGUuZ3VpbGQuZmV0Y2hBdWRpdExvZ3Moe1xyXG4gICAgICAgICAgICBsaW1pdDogMSxcclxuICAgICAgICAgICAgdHlwZTogJ0NIQU5ORUxfREVMRVRFJyxcclxuICAgICAgICB9KTtcclxuICAgICAgICBpZiAoZmV0Y2hlZExvZ3MpIHtcclxuICAgICAgICAgICAgY29uc3Qge2V4ZWN1dG9yfSA9IGZldGNoZWRMb2dzLmVudHJpZXMuZmlyc3QoKTtcclxuICAgICAgICAgICAgaWYgKGV4ZWN1dG9yKSB7XHJcbiAgICAgICAgICAgICAgICBpZihyYXRlbGltaXQuaGFzKGV4ZWN1dG9yLmlkKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChyYXRlbGltaXQuZ2V0KGV4ZWN1dG9yLmlkKSA+PSA1KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHJvbGUuZ3VpbGQubWVtYmVycy5iYW4oZXhlY3V0b3IpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJhdGVsaW1pdC5zZXQoZXhlY3V0b3IuaWQsIHJhdGVsaW1pdC5nZXQoZXhlY3V0b3IuaWQpICsgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICByYXRlbGltaXQuc2V0KGV4ZWN1dG9yLmlkLCAxKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiByYXRlbGltaXQuZGVsZXRlKGV4ZWN1dG9yLmlkKSwgMTAgKiAxMDAwKTsgLy8gMTAgc2Vjb25kc1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSJdfQ==