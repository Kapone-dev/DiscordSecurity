"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const discord_js_1 = require("discord.js");
const database_1 = require("../../database/");
const espanol_1 = __importDefault(require("../../lang/espanol"));
const english_1 = __importDefault(require("../../lang/english"));
const prefix = "d!";
const lib_1 = require("../../lib");
class MessageEvent extends lib_1.BaseEvent {
    constructor() {
        super('messageCreate');
    }
    async run(bot, message) {
        if (message.author.bot)
            return;
        if (message.guild && !message.channel.permissionsFor(bot.client.user.id).has("SEND_MESSAGES"))
            return;
        if (!bot.lang.has(message.guild.id)) {
            const searchLang = await database_1.Langs.findById(message.guild.id);
            if (!searchLang) {
                bot.lang.set(message.guild.id, english_1.default);
            }
            else {
                bot.lang.set(message.guild.id, searchLang.lang == 'es' ? espanol_1.default : english_1.default);
            }
        }
        // Setting the language
        bot.language = bot.lang.get(message.guild.id);
        if (message.content.match(new RegExp(`^<@!?${bot.client.user.id}>( |)$`))) {
            const embed = new discord_js_1.MessageEmbed()
                .setColor("RANDOM")
                .setDescription(bot.lang.get(message.guild.id).events.message.prefix)
                .setAuthor(message.member.displayName, message.author.avatarURL())
                .setFooter(message.guild.name, message.guild.iconURL({ dynamic: true }));
            message.channel.send({ embeds: [embed] });
        }
        if (!message.content.toLowerCase().startsWith(prefix.toLowerCase()))
            return;
        const args = message.content.substring(prefix.length).trim().split(/ +/g);
        const command = args.shift().toLowerCase();
        if (command.length === 0)
            return;
        // Obtenemos los comandos desde el cache
        const cmd = bot.commands.get(command);
        if (cmd) {
            if (!message.guild.me.permissions.has(["BAN_MEMBERS", "VIEW_AUDIT_LOG", "MANAGE_CHANNELS"]))
                return message.channel.send(bot.lang.get(message.guild.id).events.message.noPerms);
            if (cmd.category === "dev" && message.author.id !== process.env.DEVELOPER)
                return false;
            await cmd.run(bot, message, args);
        }
    }
}
exports.default = MessageEvent;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVzc2FnZUNyZWF0ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9ldmVudHMvbWVzc2FnZS9tZXNzYWdlQ3JlYXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsMkNBQW9HO0FBQ3BHLDhDQUFzQztBQUN0QyxpRUFBeUM7QUFDekMsaUVBQXdDO0FBQ3hDLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQztBQUNwQixtQ0FBc0M7QUFFdEMsTUFBcUIsWUFBYSxTQUFRLGVBQVM7SUFDL0M7UUFDSSxLQUFLLENBQUMsZUFBZSxDQUFDLENBQUM7SUFDM0IsQ0FBQztJQUNELEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBUSxFQUFFLE9BQWdCO1FBQ2hDLElBQUksT0FBTyxDQUFDLE1BQU0sQ0FBQyxHQUFHO1lBQUUsT0FBTztRQUMvQixJQUFJLE9BQU8sQ0FBQyxLQUFLLElBQUksQ0FBRyxPQUFPLENBQUMsT0FBcUQsQ0FBRSxjQUFjLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQztZQUFFLE9BQU87UUFFdkosSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLEVBQUU7WUFDakMsTUFBTSxVQUFVLEdBQUcsTUFBTSxnQkFBSyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQzFELElBQUksQ0FBQyxVQUFVLEVBQUU7Z0JBQ2IsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFLEVBQUUsaUJBQU0sQ0FBQyxDQUFDO2FBQzFDO2lCQUNJO2dCQUNELEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRSxFQUFFLFVBQVUsQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxpQkFBTyxDQUFDLENBQUMsQ0FBQyxpQkFBTSxDQUFDLENBQUM7YUFDOUU7U0FDSjtRQUVELHVCQUF1QjtRQUN2QixHQUFHLENBQUMsUUFBUSxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7UUFFOUMsSUFBSSxPQUFPLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxJQUFJLE1BQU0sQ0FBQyxRQUFRLEdBQUcsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsUUFBUSxDQUFDLENBQUMsRUFBRTtZQUN2RSxNQUFNLEtBQUssR0FBRyxJQUFJLHlCQUFZLEVBQUU7aUJBQzNCLFFBQVEsQ0FBQyxRQUFRLENBQUM7aUJBQ2xCLGNBQWMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDO2lCQUNwRSxTQUFTLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxXQUFXLEVBQUUsT0FBTyxDQUFDLE1BQU0sQ0FBQyxTQUFTLEVBQUUsQ0FBQztpQkFDakUsU0FBUyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQztZQUM3RSxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFDLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFDLENBQUMsQ0FBQztTQUMzQztRQUNELElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsV0FBVyxFQUFFLENBQUM7WUFBRSxPQUFPO1FBQzVFLE1BQU0sSUFBSSxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDMUUsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDLFdBQVcsRUFBRSxDQUFBO1FBQzFDLElBQUksT0FBTyxDQUFDLE1BQU0sS0FBSyxDQUFDO1lBQUUsT0FBTztRQUVqQyx3Q0FBd0M7UUFDeEMsTUFBTSxHQUFHLEdBQUcsR0FBRyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDdEMsSUFBSSxHQUFHLEVBQUU7WUFDTCxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDLGFBQWEsRUFBRSxnQkFBZ0IsRUFBRSxpQkFBaUIsQ0FBQyxDQUFDO2dCQUFFLE9BQU8sT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQ2hMLElBQUksR0FBRyxDQUFDLFFBQVEsS0FBSyxLQUFLLElBQUksT0FBTyxDQUFDLE1BQU0sQ0FBQyxFQUFFLEtBQUssT0FBTyxDQUFDLEdBQUcsQ0FBQyxTQUFTO2dCQUFFLE9BQU8sS0FBSyxDQUFDO1lBQ3hGLE1BQU0sR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO1NBQ3JDO0lBQ0wsQ0FBQztDQUNKO0FBMUNELCtCQTBDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENsaWVudCwgTWVzc2FnZSwgTWVzc2FnZUVtYmVkLCBOZXdzQ2hhbm5lbCwgVGV4dENoYW5uZWwsIFRocmVhZENoYW5uZWwgfSBmcm9tICdkaXNjb3JkLmpzJztcclxuaW1wb3J0IHtMYW5nc30gZnJvbSAnLi4vLi4vZGF0YWJhc2UvJztcclxuaW1wb3J0IGVzcGFub2wgZnJvbSAnLi4vLi4vbGFuZy9lc3Bhbm9sJztcclxuaW1wb3J0IGluZ2xlcyBmcm9tICcuLi8uLi9sYW5nL2VuZ2xpc2gnO1xyXG5jb25zdCBwcmVmaXggPSBcImQhXCI7XHJcbmltcG9ydCB7IEJhc2VFdmVudCB9IGZyb20gJy4uLy4uL2xpYic7XHJcbmltcG9ydCBCb3QgZnJvbSAnLi4vLi4vYm90JztcclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTWVzc2FnZUV2ZW50IGV4dGVuZHMgQmFzZUV2ZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKCdtZXNzYWdlQ3JlYXRlJyk7XHJcbiAgICB9XHJcbiAgICBhc3luYyBydW4oYm90OiBCb3QsIG1lc3NhZ2U6IE1lc3NhZ2UpIHtcclxuICAgICAgICBpZiAobWVzc2FnZS5hdXRob3IuYm90KSByZXR1cm47XHJcbiAgICAgICAgaWYgKG1lc3NhZ2UuZ3VpbGQgJiYgISAobWVzc2FnZS5jaGFubmVsIGFzIFRleHRDaGFubmVsIHwgTmV3c0NoYW5uZWwgfCBUaHJlYWRDaGFubmVsKSAucGVybWlzc2lvbnNGb3IoYm90LmNsaWVudC51c2VyLmlkKS5oYXMoXCJTRU5EX01FU1NBR0VTXCIpKSByZXR1cm47XHJcblxyXG4gICAgICAgIGlmICghYm90LmxhbmcuaGFzKG1lc3NhZ2UuZ3VpbGQuaWQpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHNlYXJjaExhbmcgPSBhd2FpdCBMYW5ncy5maW5kQnlJZChtZXNzYWdlLmd1aWxkLmlkKTtcclxuICAgICAgICAgICAgaWYgKCFzZWFyY2hMYW5nKSB7XHJcbiAgICAgICAgICAgICAgICBib3QubGFuZy5zZXQobWVzc2FnZS5ndWlsZC5pZCwgaW5nbGVzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGJvdC5sYW5nLnNldChtZXNzYWdlLmd1aWxkLmlkLCBzZWFyY2hMYW5nLmxhbmcgPT0gJ2VzJyA/IGVzcGFub2wgOiBpbmdsZXMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIFNldHRpbmcgdGhlIGxhbmd1YWdlXHJcbiAgICAgICAgYm90Lmxhbmd1YWdlID0gYm90LmxhbmcuZ2V0KG1lc3NhZ2UuZ3VpbGQuaWQpO1xyXG5cclxuICAgICAgICBpZiAobWVzc2FnZS5jb250ZW50Lm1hdGNoKG5ldyBSZWdFeHAoYF48QCE/JHtib3QuY2xpZW50LnVzZXIuaWR9PiggfCkkYCkpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGVtYmVkID0gbmV3IE1lc3NhZ2VFbWJlZCgpXHJcbiAgICAgICAgICAgICAgICAuc2V0Q29sb3IoXCJSQU5ET01cIilcclxuICAgICAgICAgICAgICAgIC5zZXREZXNjcmlwdGlvbihib3QubGFuZy5nZXQobWVzc2FnZS5ndWlsZC5pZCkuZXZlbnRzLm1lc3NhZ2UucHJlZml4KVxyXG4gICAgICAgICAgICAgICAgLnNldEF1dGhvcihtZXNzYWdlLm1lbWJlci5kaXNwbGF5TmFtZSwgbWVzc2FnZS5hdXRob3IuYXZhdGFyVVJMKCkpXHJcbiAgICAgICAgICAgICAgICAuc2V0Rm9vdGVyKG1lc3NhZ2UuZ3VpbGQubmFtZSwgbWVzc2FnZS5ndWlsZC5pY29uVVJMKHsgZHluYW1pYzogdHJ1ZSB9KSk7XHJcbiAgICAgICAgICAgIG1lc3NhZ2UuY2hhbm5lbC5zZW5kKHtlbWJlZHM6IFtlbWJlZF19KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCFtZXNzYWdlLmNvbnRlbnQudG9Mb3dlckNhc2UoKS5zdGFydHNXaXRoKHByZWZpeC50b0xvd2VyQ2FzZSgpKSkgcmV0dXJuO1xyXG4gICAgICAgIGNvbnN0IGFyZ3MgPSBtZXNzYWdlLmNvbnRlbnQuc3Vic3RyaW5nKHByZWZpeC5sZW5ndGgpLnRyaW0oKS5zcGxpdCgvICsvZyk7XHJcbiAgICAgICAgY29uc3QgY29tbWFuZCA9IGFyZ3Muc2hpZnQoKS50b0xvd2VyQ2FzZSgpXHJcbiAgICAgICAgaWYgKGNvbW1hbmQubGVuZ3RoID09PSAwKSByZXR1cm47XHJcblxyXG4gICAgICAgIC8vIE9idGVuZW1vcyBsb3MgY29tYW5kb3MgZGVzZGUgZWwgY2FjaGVcclxuICAgICAgICBjb25zdCBjbWQgPSBib3QuY29tbWFuZHMuZ2V0KGNvbW1hbmQpO1xyXG4gICAgICAgIGlmIChjbWQpIHtcclxuICAgICAgICAgICAgaWYgKCFtZXNzYWdlLmd1aWxkLm1lLnBlcm1pc3Npb25zLmhhcyhbXCJCQU5fTUVNQkVSU1wiLCBcIlZJRVdfQVVESVRfTE9HXCIsIFwiTUFOQUdFX0NIQU5ORUxTXCJdKSkgcmV0dXJuIG1lc3NhZ2UuY2hhbm5lbC5zZW5kKGJvdC5sYW5nLmdldChtZXNzYWdlLmd1aWxkLmlkKS5ldmVudHMubWVzc2FnZS5ub1Blcm1zKTtcclxuICAgICAgICAgICAgaWYgKGNtZC5jYXRlZ29yeSA9PT0gXCJkZXZcIiAmJiBtZXNzYWdlLmF1dGhvci5pZCAhPT0gcHJvY2Vzcy5lbnYuREVWRUxPUEVSKSByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIGF3YWl0IGNtZC5ydW4oYm90LCBtZXNzYWdlLCBhcmdzKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iXX0=