"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const coleccion = new Map();
const espanol_1 = __importDefault(require("../../lang/espanol"));
const database_1 = require("../../database/");
const english_1 = __importDefault(require("../../lang/english"));
const lib_1 = require("../../lib");
class DeleteChannelEvent extends lib_1.BaseEvent {
    constructor() {
        super('channelDelete');
    }
    async run(bot, channel) {
        if (!channel.guild.me.permissions.has(["BAN_MEMBERS", "VIEW_AUDIT_LOG"]))
            return;
        const search = await database_1.Registrador.findById(channel.guild.id);
        if (!search)
            return;
        let idioma;
        const searchLang = await database_1.Langs.findById(channel.guild.id);
        if (!searchLang)
            idioma = english_1.default;
        else
            searchLang.lang == 'es' ? idioma = espanol_1.default : idioma = english_1.default;
        const contestar = idioma.events.channelDelete;
        const fetchedLogs = await channel.guild.fetchAuditLogs({
            limit: 1,
            type: 'CHANNEL_DELETE',
        });
        const deletionLog = fetchedLogs.entries.first();
        if (!deletionLog)
            return;
        const canalReportes = await bot.client.channels.fetch(`${BigInt(search.channel)}`).catch(err => { });
        const { executor } = deletionLog;
        let comprobacion = false;
        const searchProtected = await database_1.Channel.findOne({ guildId: channel.guild.id });
        if (searchProtected && searchProtected.channel.includes(channel.id))
            comprobacion = true;
        if (!comprobacion) {
            if (search.users.includes(executor.id) || executor.id == channel.guild.ownerId)
                return; // Si no existen los canales protegidos y los autores no fueron los de la lista se seguira el proceso
        }
        else {
            if (channel.guild.ownerId == executor.id)
                return;
            const newChannel = await lib_1.createChannel(channel, idioma); // Creamos el canal denuevo;
            await Promise.all([channel.guild.members.ban(executor.id), lib_1.sendMessages(newChannel, channel), lib_1.changeChannel(channel, newChannel)]);
            if (canalReportes)
                canalReportes.send(executor.tag + " " + contestar.protegido);
            return;
        } // Si es que existen canales protegidos
        if (search.extrem) {
            await channel.guild.members.ban(executor.id, { days: 7, reason: contestar.reasonBan });
            if (canalReportes)
                canalReportes.send(contestar.reportChannel1 + executor.tag + contestar.reportChannel2Xtreme);
            await lib_1.createChannel(channel, idioma);
        }
        else {
            if (!coleccion.has(executor.id)) {
                coleccion.set(executor.id, 10);
            }
            else if (coleccion.get(executor.id) >= 20) {
                channel.guild.members.ban(executor.id, { days: 7, reason: contestar.reasonBan });
                if (canalReportes)
                    canalReportes.send(contestar.reportChannel1 + executor.tag + contestar.reportChannel2);
            }
            else {
                const n = coleccion.get(executor.id);
                coleccion.set(executor.id, n + 10);
            }
            setTimeout(() => {
                if (coleccion.has(executor.id))
                    coleccion.delete(executor.id);
            }, 20 * 1000); // Si borra 3 canales en menos de 20 segundos se va baneado :D
        }
    }
}
exports.default = DeleteChannelEvent;
//# sourceMappingURL=data:application/json;base64,