"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const discord_js_1 = require("discord.js");
const lib_1 = require("../../lib");
class GuildCreateEvent extends lib_1.BaseEvent {
    constructor() {
        super('guildCreate');
    }
    async run(bot, guild) {
        const owner = bot.client.users.cache.get(guild.ownerId) || await bot.client.users.fetch(`${BigInt(guild.ownerId)}`);
        const embed = new discord_js_1.MessageEmbed()
            .setAuthor(guild.name, guild.iconURL({ dynamic: true }))
            .setDescription("Me añadieron a un nuevo servidor, aca puedes obtener mas información al respecto")
            .addFields({
            name: "Miembros",
            value: `${guild.memberCount}`,
            inline: true
        }, {
            name: "Dueño",
            value: `${owner.id} | ${owner.tag}`,
            inline: true
        })
            .setColor("GREEN")
            .setThumbnail(guild.iconURL({ dynamic: true }));
        if (guild.me.permissions.has("VIEW_AUDIT_LOG")) {
            const fetchedLogs = await guild.fetchAuditLogs({
                limit: 1,
                type: 'BOT_ADD',
            });
            const deletionLog = fetchedLogs.entries.first();
            if (deletionLog) {
                const { executor } = deletionLog;
                embed.addField("Me agrego el usuario", executor.tag);
            }
        }
        const channel = await bot.client.channels.fetch("734207834866188300").catch(() => null);
        if (channel)
            channel.send(embed);
    }
}
exports.default = GuildCreateEvent;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3VpbGRDcmVhdGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvZXZlbnRzL21pc2MvZ3VpbGRDcmVhdGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSwyQ0FBaUQ7QUFFakQsbUNBQXNDO0FBQ3RDLE1BQXFCLGdCQUFpQixTQUFRLGVBQVM7SUFDbkQ7UUFDSSxLQUFLLENBQUMsYUFBYSxDQUFDLENBQUM7SUFDekIsQ0FBQztJQUNELEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBUSxFQUFFLEtBQVk7UUFDNUIsTUFBTSxLQUFLLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksTUFBTSxHQUFHLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNwSCxNQUFNLEtBQUssR0FBRyxJQUFJLHlCQUFZLEVBQUU7YUFDM0IsU0FBUyxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLE9BQU8sQ0FBQyxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO2FBQ3ZELGNBQWMsQ0FBQyxrRkFBa0YsQ0FBQzthQUNsRyxTQUFTLENBQ1Y7WUFDSSxJQUFJLEVBQUUsVUFBVTtZQUNoQixLQUFLLEVBQUUsR0FBRyxLQUFLLENBQUMsV0FBVyxFQUFFO1lBQzdCLE1BQU0sRUFBRSxJQUFJO1NBQ2YsRUFDRDtZQUNJLElBQUksRUFBRSxPQUFPO1lBQ2IsS0FBSyxFQUFFLEdBQUcsS0FBSyxDQUFDLEVBQUUsTUFBTSxLQUFLLENBQUMsR0FBRyxFQUFFO1lBQ25DLE1BQU0sRUFBRSxJQUFJO1NBQ2YsQ0FBQzthQUNELFFBQVEsQ0FBQyxPQUFPLENBQUM7YUFDakIsWUFBWSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFBO1FBQ25ELElBQUksS0FBSyxDQUFDLEVBQUUsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLGdCQUFnQixDQUFDLEVBQUU7WUFDNUMsTUFBTSxXQUFXLEdBQUcsTUFBTSxLQUFLLENBQUMsY0FBYyxDQUFDO2dCQUMzQyxLQUFLLEVBQUUsQ0FBQztnQkFDUixJQUFJLEVBQUUsU0FBUzthQUNsQixDQUFDLENBQUM7WUFDSCxNQUFNLFdBQVcsR0FBRyxXQUFXLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxDQUFDO1lBQ2hELElBQUksV0FBVyxFQUFFO2dCQUNiLE1BQU0sRUFBRSxRQUFRLEVBQUUsR0FBRyxXQUFXLENBQUM7Z0JBQ2pDLEtBQUssQ0FBQyxRQUFRLENBQUMsc0JBQXNCLEVBQUUsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFBO2FBQ3ZEO1NBQ0o7UUFDRCxNQUFNLE9BQU8sR0FBRyxNQUFNLEdBQUcsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN4RixJQUFJLE9BQU87WUFBRSxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFBO0lBQ3BDLENBQUM7Q0FDSjtBQXBDRCxtQ0FvQ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBHdWlsZCwgTWVzc2FnZUVtYmVkIH0gZnJvbSBcImRpc2NvcmQuanNcIjtcclxuaW1wb3J0IEJvdCBmcm9tIFwiLi4vLi4vYm90XCI7XHJcbmltcG9ydCB7IEJhc2VFdmVudCB9IGZyb20gJy4uLy4uL2xpYic7XHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEd1aWxkQ3JlYXRlRXZlbnQgZXh0ZW5kcyBCYXNlRXZlbnQge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoJ2d1aWxkQ3JlYXRlJyk7XHJcbiAgICB9XHJcbiAgICBhc3luYyBydW4oYm90OiBCb3QsIGd1aWxkOiBHdWlsZCkge1xyXG4gICAgICAgIGNvbnN0IG93bmVyID0gYm90LmNsaWVudC51c2Vycy5jYWNoZS5nZXQoZ3VpbGQub3duZXJJZCkgfHwgYXdhaXQgYm90LmNsaWVudC51c2Vycy5mZXRjaChgJHtCaWdJbnQoZ3VpbGQub3duZXJJZCl9YCk7XHJcbiAgICAgICAgY29uc3QgZW1iZWQgPSBuZXcgTWVzc2FnZUVtYmVkKClcclxuICAgICAgICAgICAgLnNldEF1dGhvcihndWlsZC5uYW1lLCBndWlsZC5pY29uVVJMKHsgZHluYW1pYzogdHJ1ZSB9KSlcclxuICAgICAgICAgICAgLnNldERlc2NyaXB0aW9uKFwiTWUgYcOxYWRpZXJvbiBhIHVuIG51ZXZvIHNlcnZpZG9yLCBhY2EgcHVlZGVzIG9idGVuZXIgbWFzIGluZm9ybWFjacOzbiBhbCByZXNwZWN0b1wiKVxyXG4gICAgICAgICAgICAuYWRkRmllbGRzKFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBuYW1lOiBcIk1pZW1icm9zXCIsXHJcbiAgICAgICAgICAgICAgICB2YWx1ZTogYCR7Z3VpbGQubWVtYmVyQ291bnR9YCxcclxuICAgICAgICAgICAgICAgIGlubGluZTogdHJ1ZVxyXG4gICAgICAgICAgICB9LCBcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgbmFtZTogXCJEdWXDsW9cIixcclxuICAgICAgICAgICAgICAgIHZhbHVlOiBgJHtvd25lci5pZH0gfCAke293bmVyLnRhZ31gLFxyXG4gICAgICAgICAgICAgICAgaW5saW5lOiB0cnVlXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5zZXRDb2xvcihcIkdSRUVOXCIpXHJcbiAgICAgICAgICAgIC5zZXRUaHVtYm5haWwoZ3VpbGQuaWNvblVSTCh7IGR5bmFtaWM6IHRydWUgfSkpXHJcbiAgICAgICAgaWYgKGd1aWxkLm1lLnBlcm1pc3Npb25zLmhhcyhcIlZJRVdfQVVESVRfTE9HXCIpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGZldGNoZWRMb2dzID0gYXdhaXQgZ3VpbGQuZmV0Y2hBdWRpdExvZ3Moe1xyXG4gICAgICAgICAgICAgICAgbGltaXQ6IDEsXHJcbiAgICAgICAgICAgICAgICB0eXBlOiAnQk9UX0FERCcsXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBjb25zdCBkZWxldGlvbkxvZyA9IGZldGNoZWRMb2dzLmVudHJpZXMuZmlyc3QoKTtcclxuICAgICAgICAgICAgaWYgKGRlbGV0aW9uTG9nKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB7IGV4ZWN1dG9yIH0gPSBkZWxldGlvbkxvZztcclxuICAgICAgICAgICAgICAgIGVtYmVkLmFkZEZpZWxkKFwiTWUgYWdyZWdvIGVsIHVzdWFyaW9cIiwgZXhlY3V0b3IudGFnKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGNoYW5uZWwgPSBhd2FpdCBib3QuY2xpZW50LmNoYW5uZWxzLmZldGNoKFwiNzM0MjA3ODM0ODY2MTg4MzAwXCIpLmNhdGNoKCgpID0+IG51bGwpO1xyXG4gICAgICAgIGlmIChjaGFubmVsKSBjaGFubmVsLnNlbmQoZW1iZWQpXHJcbiAgICB9XHJcbn0iXX0=